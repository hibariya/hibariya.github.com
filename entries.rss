<?xml version='1.0' encoding='utf-8' ?>
<rdf:RDF xmlns:content='http://purl.org/rss/1.0/modules/content/' xmlns:dc='http://purl.org/dc/elements/1.1/' xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns='http://purl.org/rss/1.0/'>
<channel rdf:about='http://hibariya.github.com/'>
<title>Joy Luck Crab</title>
<link>http://hibariya.github.com/</link>
<dc:date>2014-02-26T15:00:00Z</dc:date>
<description>hibariya.github.com</description>
<items>
<rdf:Seq>
<rdf:li rdf:resource='http://hibariya.github.com/entries/20140227/a0.html' />
<rdf:li rdf:resource='http://hibariya.github.com/entries/20140216/a0.html' />
<rdf:li rdf:resource='http://hibariya.github.com/entries/20140215/a0.html' />
<rdf:li rdf:resource='http://hibariya.github.com/entries/20130418/a0.html' />
<rdf:li rdf:resource='http://hibariya.github.com/entries/20130218/a0.html' />
<rdf:li rdf:resource='http://hibariya.github.com/entries/20130105/a0.html' />
<rdf:li rdf:resource='http://hibariya.github.com/entries/20130105/a1.html' />
<rdf:li rdf:resource='http://hibariya.github.com/entries/20130102/a0.html' />
<rdf:li rdf:resource='http://hibariya.github.com/entries/20121206/a0.html' />
<rdf:li rdf:resource='http://hibariya.github.com/entries/20121125/a0.html' />
<rdf:li rdf:resource='http://hibariya.github.com/entries/20120928/a0.html' />
<rdf:li rdf:resource='http://hibariya.github.com/entries/20120923/a0.html' />
<rdf:li rdf:resource='http://hibariya.github.com/entries/20120830/a0.html' />
<rdf:li rdf:resource='http://hibariya.github.com/entries/20120731/a0.html' />
<rdf:li rdf:resource='http://hibariya.github.com/entries/20120723/a0.html' />
<rdf:li rdf:resource='http://hibariya.github.com/entries/20120602/a0.html' />
<rdf:li rdf:resource='http://hibariya.github.com/entries/20120505/a0.html' />
<rdf:li rdf:resource='http://hibariya.github.com/entries/20120411/a0.html' />
<rdf:li rdf:resource='http://hibariya.github.com/entries/20120329/a0.html' />
<rdf:li rdf:resource='http://hibariya.github.com/entries/20120328/a0.html' />
</rdf:Seq>
</items>
</channel>
<item rdf:about='http://hibariya.github.com/entries/20140227/a0.html'>
<title>「設定」を設計するための資料</title>
<link>http://hibariya.github.com/entries/20140227/a0.html</link>
<dc:date>2014-02-26T15:00:00Z</dc:date>
<description>プログラムは、なるべく何もしなくても良い感じに動いてくれるのが理想的だけど、実際には何らかのかたちでユーザの設定を必要とすることがある。
Rails を使うときは config/application.rb でタイムゾーンを指定したり、DB へ接続するための情報を config/database.yml に指定する。
Bundler の挙動を変えたければ bundle config で設定を変更する。
Gem をインストールするときに毎回指定したいオプションがあれば、~/.gemrc に追記する。もし自分の関わるプロダクトに「設定」のAPIが必要になったとき、何を判断の基準にして設計すればいいだろう。
ちょっと近所を見渡すだけでも、「設定」のやり方には色々ありそうだ。
設定という視点から、Rubyist にとって身近なプロダクトたちを資料として眺めてみた。(NOTE: ちょっと悩みながら「設定」という言葉を選んだけど、もしかしたら「入力」と言った方が良いかもしれない。ここで言いたかった「設定」というのは「プログラムが適切に動作するために必要なあらゆる入力」の中の色々だ。)IRB: グローバルなハッシュを使うirb は起動時に ~/.irbrc ファイルを読む。
ファイルの中身は Ruby スクリプトとして評価されるが、基本的には IRB.conf でアクセスできる Hash オブジェクトを変更することで設定を行なう。
起動時に tapp gem を require したいなら以下のように書く。IRB.conf[:LOAD_MODULES] = %w(tapp)
IRB.conf には、どこからでもグローバルにアクセスできる。
irb は内部で IRB.conf をさまざまな場所からさまざまなタイミングで呼ぶ。
毎回直接呼ぶこともあれば、オブジェクトが生成されるタイミングにだけ呼んでインスタンス変数としてセットすることもある。設定情報をひとつのグローバルな Hash オブジェクトとして保持するという方法は、 シンプルで比較的実装が簡単 そうだ。RubyGems: 情報をデータの性格に応じて分けるgem コマンドの挙動を変更したいなら、コマンドへオプションを渡す他に ~/.gemrc ファイルに設定を書く方法がある。
gem install や gem update コマンドへ常に --no-document オプションを渡したいなら以下のように書く。
ファイルの中身はYAMLだ。install: --no-document
update: --no-document
設定の内容は、 Gem.configuration に Gem::ConfigFile オブジェクト (Hash オブジェクトのようにアクセスできる) として保持される。
Gem.configuration は RubyGems 内の様々な場所から呼び出される。
例として gem install コマンドが実行される際には、コマンドラインオプションと Gem.configuration[:install] の中身がマージされる。Gem.configuration が保持する情報は、 ~/.gemrc で設定できる項目だけではない。
rubygems.org 上の gem を管理する際に使う API キーも保持している。
ハッシュっぽいアクセス方法だと ~/.gemrc で設定できる一般的な設定を扱えるし、そうでない普通のメソッド呼び出しでは他の情報にもアクセスできる。Gem.configuration[:install] # =&amp;gt; &quot;--no-document&quot;
Gem.configuration.api_keys  # =&amp;gt; {:rubygems=&amp;gt;&quot;****************************&quot;}
api_keys の値は ~/.gem/credentials から読み込まれたものだ。
慎重に扱うべき情報は明確に分けられ、別物として扱われている。
こうすることによって、例えば、通常の設定ファイル (~/.gemrc) から api_keys を指定できてしまうというような 望まない使われ方を簡単にはっきりと予防する ことになりそうだ。ちなみに Gem.configuration にハッシュっぽくアクセスする際には、文字列もシンボルも同じキーとして扱われる。Rack: オブジェクトに包むrackup コマンドはカレントディレクトリの config.ru ファイルを読み込む。
ファイルの中身は Ruby スクリプトだ。# rack に添付されている、ロブスターを表示するサンプル
require 'rack/lobster'

use Rack::ShowExceptions
run Rack::Lobster.new
config.ru の内容は Rack::Builder オブジェクトの中で評価される (instance_eval)。
Rack::Builder には Rack アプリケーションを構築するためのシンプルな DSL が実装されていて、 use map run を使えば、呼び出したいアプリケーションや挿し込みたいミドルウェアを指定できる仕組みになっている。config.ru の中身は普通の Ruby スクリプトなので、簡単な Rack アプリケーションなら直接書いてもいい。
以下は固定の文字列を返すだけの単純な例だ。run -&amp;gt;(env) {
  body = 'Hi, Rack.'

  [200, {'Content-Type' =&amp;gt; 'text/plain', 'Content-Length' =&amp;gt; body.length.to_s}, [body]]
}
config.ru を読み込む処理には eval 以外にもちょっとした仕掛けがあり、ファイルの先頭でコマンドラインオプションを指定できる。
以下の例の 1 行目は shebang ではないし、Ruby 的にはコメントだが、なんと rackup すると 4423 番ポートで起動する (デフォルトは 9292)。#\ --port 4423

run -&amp;gt;(env) {
  # (省略...)
}
Rackが config.ru を評価し終えると、できあがった Rack アプリケーションがすぐに起動をはじめる。
必要なもの (サーバの起動オプションやミドルウェアの設定、そしてアプリケーションそのもの) は すべて Rack::Builder オブジェクトか Rack::Server オブジェクトのインスタンス変数として保持 されている。
グローバルにアクセスできる IRB.conf や Gem.configuration のようなものは無い。Rack::ConfigRack そのものの設定ではないが、Rack の仕組みを使って「Rack アプリケーションやミドルウェア間でやりとりするための」グローバルな設定を共有できる。
ほんの数十行からなる Rack::Config は、他のミドルウェアが必要としている値を設定するのに使える。use Rack::Config do |env|
  env['greeting.default'] = 'Hi'
end

use GreetingSupportMiddleware # このミドルウェアが env['greeting.default'] を必要としている
run GreetingApp
BundlerGemfile: 内部 DSL を使う依存したい gem を Bundler に教えるには Gemfile を使う。Gemfile の中身は以下のような感じだ。source 'https://rubygems.org'

ruby '2.1.1'

gem 'middleman', '~&amp;gt; 3.2.2'

group :development do
  gem 'rake'
end
Bundler は Gemfile を読み込んで、依存関係の情報を Bundler.definition に Bundler::Definition オブジェクトとして保持する。
IRB.conf や Gem.configuration もそうだけど、プロセス毎にせいぜい 1 つしか持たなくていいような設定は、こんな風にモジュールで直接保持して問題無さそうだ。Gemfile のための DSL は Bundler::Dsl に実装されている。Bundler::Dsl には、依存したい gem を指定するための gem や group というようなメソッドが用意されている。
Gemfile には Ruby スクリプトを自由に書けるとはいえ、独自の コードを書く機会は滅多に無い。
そして Gemfile に書く内容は、 JSON や XML でも書けそうな内容だ。
それでも、 Gemfile のために設計された専用の書き方 はそのぶん読み書きがしやすい (ように思う)。.bundle/config: 柔軟な指定を受け付ける依存を指定するには Gemfile を使った。Bundler の具体的な動作を設定するには .bundle/config を使う。
ここには、gem をどこにどうやってインストールするか、のようなマシン毎に異なる情報を設定できる (そのためリポジトリには含まれないことが多い)。.bundle/config の中身は以下のように YAML に似た KEY: VALUE 形式で記述される。KEY には BUNDLE_ というプリフィクスがつく。---
BUNDLE_PATH: put/gems/here
このファイルは手で編集してもいいが、 bundle config コマンドで設定した方が簡単だ (詳細: bundle help config)。設定を保持できる場所は .bundle/config 以外にもある。それぞれ影響する範囲が異なり、優先順位がある (上の方が優先される)。

.bundle/config で local (プロジェクト毎) に保持
環境変数として保持

~/.bundle/config で global (ユーザ毎) に保持

これをどう実現しているかは実装を見た方が早い。value に代入している箇所がそれだ。# lib/bundler/settings.rb の一部
module Bundler
  class Settings
    # (中略...)
    def [](key)
      the_key = key_for(key)
      value = (@local_config[the_key] || ENV[the_key] || @global_config[the_key])
      is_bool(key) ? to_bool(value) : value
    end
    # (中略...)
  end
end
.bundle/config ファイルには ERB で式を埋め込むようなことはできないが、必要に応じて 環境変数で指定したり、プロジェクト毎に異なる指定ができる 。読み込まれた設定は、Bundler.settings に Bundler::Settings オブジェクトとして保持される。
このオブジェクトにはハッシュっぽくアクセスできる。
が、普通の Hash オブジェクトとは違い、:path も 'path' も 'PATH' も同一のキーとして扱われる。ちなみに、 Bundler::Settings には 設定を書き込むための実装 もある。Bundler::Settings#[]= は local な .bundle/config ファイルへ、Bundler::Settings#set_global は global な ~/.bundle/config ファイルへそれぞれ値を上書きする。Ruby on Railsdatabase.yml: 式を埋め込める YAMLSQLite、PostgreSQL や MySQL などのデータベースへの接続情報は config/database.yml に設定する。
内容は YAML 文書で、かつ ERB で Ruby の式を埋め込む ことが可能だ。
実行する環境によって接続するデータベースを変えたり、デプロイ先での接続情報を環境変数などから読み込みたいときに使われる。こういった設定方法をお手軽に採用したいときには Settingslogic のような既存の gem を使えそうだ。YAML を設定に使う利点として特筆したいのは、アンカーとエイリアスによって似たような内容をまとめられる点だ。
このおかげで、似たような設定項目があるときにすっきり書ける。development: &amp;amp;development
  adapter: postgresql
  username: postgres
  encoding: unicode
  pool: 5
  database: app_development

test:
  &amp;lt;&amp;lt;: *development # ここに development の内容がドカッと入る
  database: app_test
Railtie: 複数のコンポーネントと協調するRailtie は、ActiveRecord など Rails の各コンポーネント、そして Rails アプリケーションの基盤となるコアだ。
プラグインや Engine など Rails を拡張するための何かを実装したいとき、Rails の世界で初期化処理をいいタイミングに実行したいとき、そして Rails アプリケーションと設定をやりとりしたいときには、Railtie の機能が使える。Railtie で設定を共有するRailtie を使って Rails を拡張するには Rails::Railtie クラスを継承する。
Rails::Railtie.config は設定を出し入れするためのオブジェクト (Rails::Railtie::Configuration) を返す。
このオブジェクトに設定した値は、 Rails アプリケーション全体でグローバルに共有される。
例として、Rails を起動する直前に以下のようなコードを読み込んでみよう。# config/environment.rb の先頭あたりでこのコードを require する
module MyExtention
  class Railtie &amp;lt; ::Rails::Railtie
    config.my_extention_value = 'Hi'
  end
end
設定した my_extention_value には様々な場所からアクセスできる。
例えば config/environments/development.rb の中から。# config/environments/development.rb
Hi::Application.configure do
  config.my_extention_value # =&amp;gt; &quot;Hi&quot;
  # (中略...)
end
MyExtention と Rails アプリケーションとの間でうまく設定を共有できていることが確認できる。
この値には Rails.application.config でRails アプリケーションのどこからでもアクセスできる。ところで、この例でアクセスしている config と MyExtention::Railtie 内の config は、実は異なる別々のオブジェクトだ。
にもかかわらず、 事前に設定した値に問題無くアクセスできている。
何が起こっているのかより詳しく言うと、 Rails::Railtie::Configuration オブジェクトにセットした設定に Rails::Application::Configuration オブジェクトを通してアクセスできている。
とても不思議だ。なぜそんなことができるのかというと、実は config に出し入れした値は Rails::Railtie::Configuration の クラス変数 として保持されていて、「config オブジェクト」のクラスはみなこのクラスを継承しているからだった。Railtie の config オブジェクトを見ていると、クラス変数をうまく使うことで 同じ設定を共有しつつ異なる API を提供できる ことがわかる。
例えば、 Rails::Railtie::Configuration はデータベースの接続情報など持たないが、 Rails::Application::Configuration は database_configuration というメソッドを持つ。
そういった違いがありつつも、ふたつのクラスは同じ設定 my_extention_value を共有している。Rails.application.config.class                     # =&amp;gt; Rails::Application::Configuration
Rails.application.config.my_extention_value        # =&amp;gt; &quot;Hi&quot;
Rails.application.config.database_configuration    # =&amp;gt; {&quot;development&quot;=&amp;gt;{&quot;adapter&quot;=&amp;gt;&quot;sqlite3&quot;, &quot;database&quot;=&amp;gt;&quot;db/...}

MyExtention::Railtie.config.class                  # =&amp;gt; Rails::Railtie::Configuration
MyExtention::Railtie.config.my_extention_value     # =&amp;gt; &quot;Hi&quot;
MyExtention::Railtie.config.database_configuration # NoMethodError
sprockets-rails の例Rails::Railtie::Configuration (とそれを継承したクラスたち) は、Rails アプリケーション起動時の様々なタイミングでフックできるメソッドを供えている。
これを利用すれば、アプリケーションの初期化前にデフォルト値を設定しておき、初期化中にユーザ (プログラマ) によってカスタマイズされた設定値を、初期化後に受け取って利用することが可能になる。具体的な例を見てみる。
sprockets-rails の Sprockets::Railtie は、config.assets.prefix という値を扱う。
該当個所を以下に抜き出してコメントを書いてみた。module Sprockets
  class Railtie &amp;lt; ::Rails::Railtie
    # (中略)

    # 1. sprockets-rails が require されるとこの辺が実行される
    config.assets = OrderedOptions.new
    config.assets._blocks    = []
    config.assets.paths      = []
    config.assets.prefix     = &quot;/assets&quot; # 2. ここでデフォルト値が設定される
    # (中略)
    config.after_initialize do |app|
      # 3. Rails アプリケーションの初期化が完了すると、このブロックが実行される
      config = app.config
      # (中略)
      ActionView::Base.instance_eval do
        include Sprockets::Rails::Helper

        # Copy relevant config to AV context
        self.debug_assets  = config.assets.debug
        self.digest_assets = config.assets.digest
        self.assets_prefix = config.assets.prefix # 4. ここで最終的に設定された値がセットされる
        # (中略)
      end
      # (中略)
    end
  end
end
config.assets.prefix というのは precompile した assetsをどこに配置するか指定するもので、デフォルトは '/assets' になっている。
その結果、通常は precompile 済みの assets が public/assets 下に配置される。
この値は Rails アプリケーションの設定 (config/application.rb など) で、以下のように上書きできる。# config/application.rb

# (中略)
module Hi
  class Application &amp;lt; Rails::Application
    config.assets.prefix = '/put-assets-here'
    # (中略)
  end
end

上記のコードが実行されアプリケーションの初期化処理も完了すると、Sprockets::Railtie クラスで定義された config.after_initialize フックが呼び出される。
こうしてカスタマイズされた値 '/put-assets-here' が ActionView::Base.assets_prefix にセットされるという寸法だ。Railtie が提供するフックポイントは色々ある。
before_initialize や before_configuration など、after_initialize 以外にも様々だ。ActiveSupport::OrderedOptionsこれは Railtie とはあまり関係無いけれど、もしも MyExtention に関する設定が複数あり、それも階層で表現できた方がより都合が良いときは ActiveSupport::OrderedOptions を利用できる。これはハッシュのような API を備えていて、かつ、キーの名前をメソッド名のようにして呼び出すことができる。module MyExtention
  class Railtie &amp;lt; ::Rails::Railtie
    config.my_extention = ActiveSupport::OrderedOptions.new
    config.my_extention.alpha = 'Alpha'
    config.my_extention.bravo = 'Bravo'

    config.my_extention.alpha # =&amp;gt; 'Alpha'
    config.my_extention.bravo # =&amp;gt; 'Bravo'
  end
end
最後に「設定」の API はユーザに公開する「変更が大変な部分」なので、なるべく先を見越して設計しておきたい。
「この項目は本当にこんな名前で、こういう扱いでいいのか」ということを悩んだときには、ここで挙げたような先人の知恵が助けになりそうだ。バージョン情報
irb 0.9.6
rubygems 2.2.2
rack 1.5.2
bundler 1.5.3
rails (railties) 4.0.2
sprockets-rails 2.0.1
</description>
<content:encoded>
<![CDATA[
    <p>プログラムは、なるべく何もしなくても良い感じに動いてくれるのが理想的だけど、実際には何らかのかたちでユーザの設定を必要とすることがある。
    Rails を使うときは <code>config/application.rb</code> でタイムゾーンを指定したり、DB へ接続するための情報を <code>config/database.yml</code> に指定する。
    Bundler の挙動を変えたければ <code>bundle config</code> で設定を変更する。
    Gem をインストールするときに毎回指定したいオプションがあれば、<code>~/.gemrc</code> に追記する。</p><p>もし自分の関わるプロダクトに「設定」のAPIが必要になったとき、何を判断の基準にして設計すればいいだろう。
    ちょっと近所を見渡すだけでも、「設定」のやり方には色々ありそうだ。
    設定という視点から、Rubyist にとって身近なプロダクトたちを資料として眺めてみた。</p><p>(NOTE: ちょっと悩みながら「設定」という言葉を選んだけど、もしかしたら「入力」と言った方が良いかもしれない。ここで言いたかった「設定」というのは「プログラムが適切に動作するために必要なあらゆる入力」の中の色々だ。)</p><h2>IRB: グローバルなハッシュを使う</h2><p>irb は起動時に <code>~/.irbrc</code> ファイルを読む。
    ファイルの中身は Ruby スクリプトとして評価されるが、基本的には <code>IRB.conf</code> でアクセスできる Hash オブジェクトを変更することで設定を行なう。
    起動時に tapp gem を require したいなら以下のように書く。</p><pre class="highlight ruby"><span class="no">IRB</span><span class="p">.</span><span class="nf">conf</span><span class="o">[</span><span class="ss">:LOAD_MODULES</span><span class="o">]</span> <span class="o">=</span> <span class="sx">%w(tapp)</span>&#x000A;    </pre><p><code>IRB.conf</code> には、どこからでもグローバルにアクセスできる。
    irb は内部で <code>IRB.conf</code> をさまざまな場所からさまざまなタイミングで呼ぶ。
    毎回直接呼ぶこともあれば、オブジェクトが生成されるタイミングにだけ呼んでインスタンス変数としてセットすることもある。</p><p>設定情報をひとつのグローバルな Hash オブジェクトとして保持するという方法は、 <strong>シンプルで比較的実装が簡単</strong> そうだ。</p><h2>RubyGems: 情報をデータの性格に応じて分ける</h2><p><code>gem</code> コマンドの挙動を変更したいなら、コマンドへオプションを渡す他に <code>~/.gemrc</code> ファイルに設定を書く方法がある。
    <code>gem install</code> や <code>gem update</code> コマンドへ常に <code>--no-document</code> オプションを渡したいなら以下のように書く。
    ファイルの中身はYAMLだ。</p><pre class="highlight yaml"><span class="s">install</span><span class="pi">:</span> <span class="s">--no-document</span>&#x000A;    <span class="s">update</span><span class="pi">:</span> <span class="s">--no-document</span>&#x000A;    </pre><p>設定の内容は、 <code>Gem.configuration</code> に <code>Gem::ConfigFile</code> オブジェクト (Hash オブジェクトのようにアクセスできる) として保持される。
    <code>Gem.configuration</code> は RubyGems 内の様々な場所から呼び出される。
    例として <code>gem install</code> コマンドが実行される際には、コマンドラインオプションと <code>Gem.configuration[:install]</code> の中身がマージされる。</p><p><code>Gem.configuration</code> が保持する情報は、 <code>~/.gemrc</code> で設定できる項目だけではない。
    rubygems.org 上の gem を管理する際に使う API キーも保持している。
    ハッシュっぽいアクセス方法だと <code>~/.gemrc</code> で設定できる一般的な設定を扱えるし、そうでない普通のメソッド呼び出しでは他の情報にもアクセスできる。</p><pre class="highlight ruby"><span class="no">Gem</span><span class="p">.</span><span class="nf">configuration</span><span class="o">[</span><span class="ss">:install</span><span class="o">]</span> <span class="c1"># =&gt; "--no-document"</span>&#x000A;    <span class="no">Gem</span><span class="p">.</span><span class="nf">configuration</span><span class="p">.</span><span class="nf">api_keys</span>  <span class="c1"># =&gt; {:rubygems=&gt;"****************************"}</span>&#x000A;    </pre><p>api_keys の値は <code>~/.gem/credentials</code> から読み込まれたものだ。
    慎重に扱うべき情報は明確に分けられ、別物として扱われている。
    こうすることによって、例えば、通常の設定ファイル (<code>~/.gemrc</code>) から api_keys を指定できてしまうというような <strong>望まない使われ方を簡単にはっきりと予防する</strong> ことになりそうだ。</p><p>ちなみに <code>Gem.configuration</code> にハッシュっぽくアクセスする際には、文字列もシンボルも同じキーとして扱われる。</p><h2>Rack: オブジェクトに包む</h2><p><code>rackup</code> コマンドはカレントディレクトリの <code>config.ru</code> ファイルを読み込む。
    ファイルの中身は Ruby スクリプトだ。</p><pre class="highlight ruby"><span class="c1"># rack に添付されている、ロブスターを表示するサンプル</span>&#x000A;    <span class="nb">require</span> <span class="s1">'rack/lobster'</span>&#x000A;    &#x000A;    <span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">ShowExceptions</span>&#x000A;    <span class="n">run</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Lobster</span><span class="p">.</span><span class="nf">new</span>&#x000A;    </pre><p><code>config.ru</code> の内容は <code>Rack::Builder</code> オブジェクトの中で評価される (instance_eval)。
    <code>Rack::Builder</code> には Rack アプリケーションを構築するためのシンプルな DSL が実装されていて、 <code>use</code> <code>map</code> <code>run</code> を使えば、呼び出したいアプリケーションや挿し込みたいミドルウェアを指定できる仕組みになっている。</p><p><code>config.ru</code> の中身は普通の Ruby スクリプトなので、簡単な Rack アプリケーションなら直接書いてもいい。
    以下は固定の文字列を返すだけの単純な例だ。</p><pre class="highlight ruby"><span class="n">run</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">env</span><span class="p">)</span> <span class="p">{</span>&#x000A;      <span class="n">body</span> <span class="o">=</span> <span class="s1">'Hi, Rack.'</span>&#x000A;    &#x000A;      <span class="o">[</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">'Content-Type'</span> <span class="o">=&gt;</span> <span class="s1">'text/plain'</span><span class="p">,</span> <span class="s1">'Content-Length'</span> <span class="o">=&gt;</span> <span class="n">body</span><span class="p">.</span><span class="nf">length</span><span class="p">.</span><span class="nf">to_s</span><span class="p">},</span> <span class="o">[</span><span class="n">body</span><span class="o">]]</span>&#x000A;    <span class="p">}</span>&#x000A;    </pre><p><code>config.ru</code> を読み込む処理には eval 以外にもちょっとした仕掛けがあり、ファイルの先頭でコマンドラインオプションを指定できる。
    以下の例の 1 行目は shebang ではないし、Ruby 的にはコメントだが、なんと <code>rackup</code> すると 4423 番ポートで起動する (デフォルトは 9292)。</p><pre class="highlight ruby"><span class="c1">#\ --port 4423</span>&#x000A;    &#x000A;    <span class="n">run</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">env</span><span class="p">)</span> <span class="p">{</span>&#x000A;      <span class="c1"># (省略...)</span>&#x000A;    <span class="p">}</span>&#x000A;    </pre><p>Rackが <code>config.ru</code> を評価し終えると、できあがった Rack アプリケーションがすぐに起動をはじめる。
    必要なもの (サーバの起動オプションやミドルウェアの設定、そしてアプリケーションそのもの) は <strong>すべて <code>Rack::Builder</code> オブジェクトか <code>Rack::Server</code> オブジェクトのインスタンス変数として保持</strong> されている。
    グローバルにアクセスできる <code>IRB.conf</code> や <code>Gem.configuration</code> のようなものは無い。</p><h3>Rack::Config</h3><p>Rack そのものの設定ではないが、Rack の仕組みを使って「Rack アプリケーションやミドルウェア間でやりとりするための」グローバルな設定を共有できる。
    ほんの数十行からなる <code>Rack::Config</code> は、他のミドルウェアが必要としている値を設定するのに使える。</p><pre class="highlight ruby"><span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Config</span> <span class="k">do</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span>&#x000A;      <span class="n">env</span><span class="o">[</span><span class="s1">'greeting.default'</span><span class="o">]</span> <span class="o">=</span> <span class="s1">'Hi'</span>&#x000A;    <span class="k">end</span>&#x000A;    &#x000A;    <span class="n">use</span> <span class="no">GreetingSupportMiddleware</span> <span class="c1"># このミドルウェアが env['greeting.default'] を必要としている</span>&#x000A;    <span class="n">run</span> <span class="no">GreetingApp</span>&#x000A;    </pre><h2>Bundler</h2><h3>Gemfile: 内部 DSL を使う</h3><p>依存したい gem を Bundler に教えるには <code>Gemfile</code> を使う。<code>Gemfile</code> の中身は以下のような感じだ。</p><pre class="highlight ruby"><span class="n">source</span> <span class="s1">'https://rubygems.org'</span>&#x000A;    &#x000A;    <span class="n">ruby</span> <span class="s1">'2.1.1'</span>&#x000A;    &#x000A;    <span class="n">gem</span> <span class="s1">'middleman'</span><span class="p">,</span> <span class="s1">'~&gt; 3.2.2'</span>&#x000A;    &#x000A;    <span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>&#x000A;      <span class="n">gem</span> <span class="s1">'rake'</span>&#x000A;    <span class="k">end</span>&#x000A;    </pre><p>Bundler は <code>Gemfile</code> を読み込んで、依存関係の情報を <code>Bundler.definition</code> に <code>Bundler::Definition</code> オブジェクトとして保持する。
    <code>IRB.conf</code> や <code>Gem.configuration</code> もそうだけど、プロセス毎にせいぜい 1 つしか持たなくていいような設定は、こんな風にモジュールで直接保持して問題無さそうだ。</p><p><code>Gemfile</code> のための DSL は <code>Bundler::Dsl</code> に実装されている。<code>Bundler::Dsl</code> には、依存したい gem を指定するための <code>gem</code> や <code>group</code> というようなメソッドが用意されている。
    Gemfile には Ruby スクリプトを自由に書けるとはいえ、独自の コードを書く機会は滅多に無い。
    そして Gemfile に書く内容は、 JSON や XML でも書けそうな内容だ。
    それでも、 <strong>Gemfile のために設計された専用の書き方</strong> はそのぶん読み書きがしやすい (ように思う)。</p><h3>.bundle/config: 柔軟な指定を受け付ける</h3><p>依存を指定するには Gemfile を使った。Bundler の具体的な動作を設定するには <code>.bundle/config</code> を使う。
    ここには、gem をどこにどうやってインストールするか、のようなマシン毎に異なる情報を設定できる (そのためリポジトリには含まれないことが多い)。</p><p><code>.bundle/config</code> の中身は以下のように YAML に似た <code>KEY: VALUE</code> 形式で記述される。KEY には <code>BUNDLE_</code> というプリフィクスがつく。</p><pre class="highlight yaml"><span class="nn">---</span>&#x000A;    <span class="s">BUNDLE_PATH</span><span class="pi">:</span> <span class="s">put/gems/here</span>&#x000A;    </pre><p>このファイルは手で編集してもいいが、 <code>bundle config</code> コマンドで設定した方が簡単だ (詳細: <code>bundle help config</code>)。</p><p>設定を保持できる場所は <code>.bundle/config</code> 以外にもある。それぞれ影響する範囲が異なり、優先順位がある (上の方が優先される)。</p><ul>
    <li>
    <code>.bundle/config</code> で local (プロジェクト毎) に保持</li>
    <li>環境変数として保持</li>
    <li>
    <code>~/.bundle/config</code> で global (ユーザ毎) に保持</li>
    </ul>
    <p>これをどう実現しているかは実装を見た方が早い。<code>value</code> に代入している箇所がそれだ。</p><pre class="highlight ruby"><span class="c1"># lib/bundler/settings.rb の一部</span>&#x000A;    <span class="k">module</span> <span class="nn">Bundler</span>&#x000A;      <span class="k">class</span> <span class="nc">Settings</span>&#x000A;        <span class="c1"># (中略...)</span>&#x000A;        <span class="k">def</span> <span class="nf">[]</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>&#x000A;          <span class="n">the_key</span> <span class="o">=</span> <span class="n">key_for</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>&#x000A;          <span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="vi">@local_config</span><span class="o">[</span><span class="n">the_key</span><span class="o">]</span> <span class="o">||</span> <span class="no">ENV</span><span class="o">[</span><span class="n">the_key</span><span class="o">]</span> <span class="o">||</span> <span class="vi">@global_config</span><span class="o">[</span><span class="n">the_key</span><span class="o">]</span><span class="p">)</span>&#x000A;          <span class="n">is_bool</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="p">?</span> <span class="n">to_bool</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">:</span> <span class="n">value</span>&#x000A;        <span class="k">end</span>&#x000A;        <span class="c1"># (中略...)</span>&#x000A;      <span class="k">end</span>&#x000A;    <span class="k">end</span>&#x000A;    </pre><p><code>.bundle/config</code> ファイルには ERB で式を埋め込むようなことはできないが、必要に応じて <strong>環境変数で指定したり、プロジェクト毎に異なる指定ができる</strong> 。</p><p>読み込まれた設定は、<code>Bundler.settings</code> に <code>Bundler::Settings</code> オブジェクトとして保持される。
    このオブジェクトにはハッシュっぽくアクセスできる。
    が、普通の Hash オブジェクトとは違い、<code>:path</code> も <code>'path'</code> も <code>'PATH'</code> も同一のキーとして扱われる。</p><p>ちなみに、 <code>Bundler::Settings</code> には <strong>設定を書き込むための実装</strong> もある。<code>Bundler::Settings#[]=</code> は local な <code>.bundle/config</code> ファイルへ、<code>Bundler::Settings#set_global</code> は global な <code>~/.bundle/config</code> ファイルへそれぞれ値を上書きする。</p><h2>Ruby on Rails</h2><h3>database.yml: 式を埋め込める YAML</h3><p>SQLite、PostgreSQL や MySQL などのデータベースへの接続情報は <code>config/database.yml</code> に設定する。
    内容は YAML 文書で、かつ <strong>ERB で Ruby の式を埋め込む</strong> ことが可能だ。
    実行する環境によって接続するデータベースを変えたり、デプロイ先での接続情報を環境変数などから読み込みたいときに使われる。</p><p>こういった設定方法をお手軽に採用したいときには Settingslogic のような既存の gem を使えそうだ。</p><p>YAML を設定に使う利点として特筆したいのは、アンカーとエイリアスによって似たような内容をまとめられる点だ。
    このおかげで、似たような設定項目があるときにすっきり書ける。</p><pre class="highlight yaml"><span class="s">development</span><span class="pi">:</span> <span class="nl">&amp;development</span>&#x000A;      <span class="s">adapter</span><span class="pi">:</span> <span class="s">postgresql</span>&#x000A;      <span class="s">username</span><span class="pi">:</span> <span class="s">postgres</span>&#x000A;      <span class="s">encoding</span><span class="pi">:</span> <span class="s">unicode</span>&#x000A;      <span class="s">pool</span><span class="pi">:</span> <span class="s">5</span>&#x000A;      <span class="s">database</span><span class="pi">:</span> <span class="s">app_development</span>&#x000A;    &#x000A;    <span class="s">test</span><span class="pi">:</span>&#x000A;      <span class="s">&lt;&lt;</span><span class="pi">:</span> <span class="nv">*development</span> <span class="c1"># ここに development の内容がドカッと入る</span>&#x000A;      <span class="s">database</span><span class="pi">:</span> <span class="s">app_test</span>&#x000A;    </pre><h3>Railtie: 複数のコンポーネントと協調する</h3><p>Railtie は、ActiveRecord など Rails の各コンポーネント、そして Rails アプリケーションの基盤となるコアだ。
    プラグインや Engine など Rails を拡張するための何かを実装したいとき、Rails の世界で初期化処理をいいタイミングに実行したいとき、そして Rails アプリケーションと設定をやりとりしたいときには、Railtie の機能が使える。</p><h4>Railtie で設定を共有する</h4><p>Railtie を使って Rails を拡張するには <code>Rails::Railtie</code> クラスを継承する。
    <code>Rails::Railtie.config</code> は設定を出し入れするためのオブジェクト (<code>Rails::Railtie::Configuration</code>) を返す。
    このオブジェクトに設定した値は、 Rails アプリケーション全体でグローバルに共有される。
    例として、Rails を起動する直前に以下のようなコードを読み込んでみよう。</p><pre class="highlight ruby"><span class="c1"># config/environment.rb の先頭あたりでこのコードを require する</span>&#x000A;    <span class="k">module</span> <span class="nn">MyExtention</span>&#x000A;      <span class="k">class</span> <span class="nc">Railtie</span> <span class="o">&lt;</span> <span class="o">::</span><span class="no">Rails</span><span class="o">::</span><span class="no">Railtie</span>&#x000A;        <span class="n">config</span><span class="p">.</span><span class="nf">my_extention_value</span> <span class="o">=</span> <span class="s1">'Hi'</span>&#x000A;      <span class="k">end</span>&#x000A;    <span class="k">end</span>&#x000A;    </pre><p>設定した <code>my_extention_value</code> には様々な場所からアクセスできる。
    例えば <code>config/environments/development.rb</code> の中から。</p><pre class="highlight ruby"><span class="c1"># config/environments/development.rb</span>&#x000A;    <span class="no">Hi</span><span class="o">::</span><span class="no">Application</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span>&#x000A;      <span class="n">config</span><span class="p">.</span><span class="nf">my_extention_value</span> <span class="c1"># =&gt; "Hi"</span>&#x000A;      <span class="c1"># (中略...)</span>&#x000A;    <span class="k">end</span>&#x000A;    </pre><p><code>MyExtention</code> と Rails アプリケーションとの間でうまく設定を共有できていることが確認できる。
    この値には <code>Rails.application.config</code> でRails アプリケーションのどこからでもアクセスできる。</p><p>ところで、この例でアクセスしている config と <code>MyExtention::Railtie</code> 内の config は、実は異なる別々のオブジェクトだ。
    にもかかわらず、 事前に設定した値に問題無くアクセスできている。
    何が起こっているのかより詳しく言うと、 <code>Rails::Railtie::Configuration</code> オブジェクトにセットした設定に <code>Rails::Application::Configuration</code> オブジェクトを通してアクセスできている。
    とても不思議だ。</p><p>なぜそんなことができるのかというと、実は config に出し入れした値は <code>Rails::Railtie::Configuration</code> の <strong>クラス変数</strong> として保持されていて、「config オブジェクト」のクラスはみなこのクラスを継承しているからだった。</p><p>Railtie の config オブジェクトを見ていると、クラス変数をうまく使うことで <strong>同じ設定を共有しつつ異なる API を提供できる</strong> ことがわかる。
    例えば、 <code>Rails::Railtie::Configuration</code> はデータベースの接続情報など持たないが、 <code>Rails::Application::Configuration</code> は <code>database_configuration</code> というメソッドを持つ。
    そういった違いがありつつも、ふたつのクラスは同じ設定 <code>my_extention_value</code> を共有している。</p><pre class="highlight ruby"><span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">config</span><span class="p">.</span><span class="nf">class</span>                     <span class="c1"># =&gt; Rails::Application::Configuration</span>&#x000A;    <span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">config</span><span class="p">.</span><span class="nf">my_extention_value</span>        <span class="c1"># =&gt; "Hi"</span>&#x000A;    <span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">config</span><span class="p">.</span><span class="nf">database_configuration</span>    <span class="c1"># =&gt; {"development"=&gt;{"adapter"=&gt;"sqlite3", "database"=&gt;"db/...}</span>&#x000A;    &#x000A;    <span class="no">MyExtention</span><span class="o">::</span><span class="no">Railtie</span><span class="p">.</span><span class="nf">config</span><span class="p">.</span><span class="nf">class</span>                  <span class="c1"># =&gt; Rails::Railtie::Configuration</span>&#x000A;    <span class="no">MyExtention</span><span class="o">::</span><span class="no">Railtie</span><span class="p">.</span><span class="nf">config</span><span class="p">.</span><span class="nf">my_extention_value</span>     <span class="c1"># =&gt; "Hi"</span>&#x000A;    <span class="no">MyExtention</span><span class="o">::</span><span class="no">Railtie</span><span class="p">.</span><span class="nf">config</span><span class="p">.</span><span class="nf">database_configuration</span> <span class="c1"># NoMethodError</span>&#x000A;    </pre><h4>sprockets-rails の例</h4><p><code>Rails::Railtie::Configuration</code> (とそれを継承したクラスたち) は、Rails アプリケーション起動時の様々なタイミングでフックできるメソッドを供えている。
    これを利用すれば、アプリケーションの初期化前にデフォルト値を設定しておき、初期化中にユーザ (プログラマ) によってカスタマイズされた設定値を、初期化後に受け取って利用することが可能になる。</p><p>具体的な例を見てみる。
    sprockets-rails の <code>Sprockets::Railtie</code> は、<code>config.assets.prefix</code> という値を扱う。
    該当個所を以下に抜き出してコメントを書いてみた。</p><pre class="highlight ruby"><span class="k">module</span> <span class="nn">Sprockets</span>&#x000A;      <span class="k">class</span> <span class="nc">Railtie</span> <span class="o">&lt;</span> <span class="o">::</span><span class="no">Rails</span><span class="o">::</span><span class="no">Railtie</span>&#x000A;        <span class="c1"># (中略)</span>&#x000A;    &#x000A;        <span class="c1"># 1. sprockets-rails が require されるとこの辺が実行される</span>&#x000A;        <span class="n">config</span><span class="p">.</span><span class="nf">assets</span> <span class="o">=</span> <span class="no">OrderedOptions</span><span class="p">.</span><span class="nf">new</span>&#x000A;        <span class="n">config</span><span class="p">.</span><span class="nf">assets</span><span class="p">.</span><span class="nf">_blocks</span>    <span class="o">=</span> <span class="o">[]</span>&#x000A;        <span class="n">config</span><span class="p">.</span><span class="nf">assets</span><span class="p">.</span><span class="nf">paths</span>      <span class="o">=</span> <span class="o">[]</span>&#x000A;        <span class="n">config</span><span class="p">.</span><span class="nf">assets</span><span class="p">.</span><span class="nf">prefix</span>     <span class="o">=</span> <span class="s2">"/assets"</span> <span class="c1"># 2. ここでデフォルト値が設定される</span>&#x000A;        <span class="c1"># (中略)</span>&#x000A;        <span class="n">config</span><span class="p">.</span><span class="nf">after_initialize</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>&#x000A;          <span class="c1"># 3. Rails アプリケーションの初期化が完了すると、このブロックが実行される</span>&#x000A;          <span class="n">config</span> <span class="o">=</span> <span class="n">app</span><span class="p">.</span><span class="nf">config</span>&#x000A;          <span class="c1"># (中略)</span>&#x000A;          <span class="no">ActionView</span><span class="o">::</span><span class="no">Base</span><span class="p">.</span><span class="nf">instance_eval</span> <span class="k">do</span>&#x000A;            <span class="kp">include</span> <span class="no">Sprockets</span><span class="o">::</span><span class="no">Rails</span><span class="o">::</span><span class="no">Helper</span>&#x000A;    &#x000A;            <span class="c1"># Copy relevant config to AV context</span>&#x000A;            <span class="nb">self</span><span class="p">.</span><span class="nf">debug_assets</span>  <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="nf">assets</span><span class="p">.</span><span class="nf">debug</span>&#x000A;            <span class="nb">self</span><span class="p">.</span><span class="nf">digest_assets</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="nf">assets</span><span class="p">.</span><span class="nf">digest</span>&#x000A;            <span class="nb">self</span><span class="p">.</span><span class="nf">assets_prefix</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="nf">assets</span><span class="p">.</span><span class="nf">prefix</span> <span class="c1"># 4. ここで最終的に設定された値がセットされる</span>&#x000A;            <span class="c1"># (中略)</span>&#x000A;          <span class="k">end</span>&#x000A;          <span class="c1"># (中略)</span>&#x000A;        <span class="k">end</span>&#x000A;      <span class="k">end</span>&#x000A;    <span class="k">end</span>&#x000A;    </pre><p><code>config.assets.prefix</code> というのは precompile した assetsをどこに配置するか指定するもので、デフォルトは <code>'/assets'</code> になっている。
    その結果、通常は precompile 済みの assets が <code>public/assets</code> 下に配置される。
    この値は Rails アプリケーションの設定 (<code>config/application.rb</code> など) で、以下のように上書きできる。</p><pre class="highlight ruby"><span class="c1"># config/application.rb</span>&#x000A;    &#x000A;    <span class="c1"># (中略)</span>&#x000A;    <span class="k">module</span> <span class="nn">Hi</span>&#x000A;      <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="no">Rails</span><span class="o">::</span><span class="no">Application</span>&#x000A;        <span class="n">config</span><span class="p">.</span><span class="nf">assets</span><span class="p">.</span><span class="nf">prefix</span> <span class="o">=</span> <span class="s1">'/put-assets-here'</span>&#x000A;        <span class="c1"># (中略)</span>&#x000A;      <span class="k">end</span>&#x000A;    <span class="k">end</span>&#x000A;    &#x000A;    </pre><p>上記のコードが実行されアプリケーションの初期化処理も完了すると、<code>Sprockets::Railtie</code> クラスで定義された <code>config.after_initialize</code> フックが呼び出される。
    こうしてカスタマイズされた値 <code>'/put-assets-here'</code> が <code>ActionView::Base.assets_prefix</code> にセットされるという寸法だ。</p><p>Railtie が提供するフックポイントは色々ある。
    <code>before_initialize</code> や <code>before_configuration</code> など、<code>after_initialize</code> 以外にも様々だ。</p><h4>ActiveSupport::OrderedOptions</h4><p>これは Railtie とはあまり関係無いけれど、もしも <code>MyExtention</code> に関する設定が複数あり、それも階層で表現できた方がより都合が良いときは <code>ActiveSupport::OrderedOptions</code> を利用できる。これはハッシュのような API を備えていて、かつ、キーの名前をメソッド名のようにして呼び出すことができる。</p><pre class="highlight ruby"><span class="k">module</span> <span class="nn">MyExtention</span>&#x000A;      <span class="k">class</span> <span class="nc">Railtie</span> <span class="o">&lt;</span> <span class="o">::</span><span class="no">Rails</span><span class="o">::</span><span class="no">Railtie</span>&#x000A;        <span class="n">config</span><span class="p">.</span><span class="nf">my_extention</span> <span class="o">=</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">OrderedOptions</span><span class="p">.</span><span class="nf">new</span>&#x000A;        <span class="n">config</span><span class="p">.</span><span class="nf">my_extention</span><span class="p">.</span><span class="nf">alpha</span> <span class="o">=</span> <span class="s1">'Alpha'</span>&#x000A;        <span class="n">config</span><span class="p">.</span><span class="nf">my_extention</span><span class="p">.</span><span class="nf">bravo</span> <span class="o">=</span> <span class="s1">'Bravo'</span>&#x000A;    &#x000A;        <span class="n">config</span><span class="p">.</span><span class="nf">my_extention</span><span class="p">.</span><span class="nf">alpha</span> <span class="c1"># =&gt; 'Alpha'</span>&#x000A;        <span class="n">config</span><span class="p">.</span><span class="nf">my_extention</span><span class="p">.</span><span class="nf">bravo</span> <span class="c1"># =&gt; 'Bravo'</span>&#x000A;      <span class="k">end</span>&#x000A;    <span class="k">end</span>&#x000A;    </pre><h2>最後に</h2><p>「設定」の API はユーザに公開する「変更が大変な部分」なので、なるべく先を見越して設計しておきたい。
    「この項目は本当にこんな名前で、こういう扱いでいいのか」ということを悩んだときには、ここで挙げたような先人の知恵が助けになりそうだ。</p><h3>バージョン情報</h3><ul>
    <li>irb 0.9.6</li>
    <li>rubygems 2.2.2</li>
    <li>rack 1.5.2</li>
    <li>bundler 1.5.3</li>
    <li>rails (railties) 4.0.2</li>
    <li>sprockets-rails 2.0.1</li>
    </ul>
]]>
</content:encoded>
</item>
<item rdf:about='http://hibariya.github.com/entries/20140216/a0.html'>
<title>Installing Gentoo linux with UEFI boot</title>
<link>http://hibariya.github.com/entries/20140216/a0.html</link>
<dc:date>2014-02-15T15:00:00Z</dc:date>
<description>年末に Funtoo でアップデートに失敗して、依存関係を何だかよくわからないちぐはぐな状態にしてしまったので、一旦環境を捨てて Gentoo を試してみることにした。
その頃ちょうど Funtoo で GNOME の入れ直しが難しい 状態になっていて、どうせ入れ直すなら Gentoo の方が楽そうという理由から。
そのときの記録を (断片的だけどだいたい順番に) 残しておく。
足りない分はだいたい Gentoo Linux AMD64 ハンドブック と同じ。$ # パーティションの作成
$ parted
(parted) mklabel gpt
(parted) mkpart primary fat32 0% 512m
(parted) set 1 boot on
(parted) mkpart primary linux-swap 512m 1024m
(parted) mkpart pimrary ext4 1024m -1s

$ # ファイルシステムの作成
$ mkfs.vfat -F 32 /dev/sda1
$ mkswap /dev/sda2
$ swapon /dev/sda2
$ mkfs.ext4 /dev/sda3

$ # ファイルシステムのマウント、chroot
$ mount /dev/sda3 /mnt/gentoo
$ mkdir -p /mnt/gentoo/boot/efi
$ mount /dev/sda1 /mnt/gentoo/boot/efi
$ cd /mnt/gentoo
$ # (stage3 と portage を落としてきて展開)
$ mount -t proc none proc
$ mount --rbind /dev dev
$ cp /etc/resolv.conf /mnt/gentoo/etc/
$ chroot /mnt/gentoo /bin/bash
$ env-update
$ source /etc/profile
$ export PS1=&quot;(chroot) $PS1&quot;

$ # タイムゾーンの設定
$ # (BIOS の設定に応じて /etc/conf.d/hwclock で clock=&quot;local&quot; にする必要があるかも。うまいことやって)
$ cp -p /usr/share/zoneinfo/Asia/Tokyo /etc/localtime

$ # make.conf の設定とか
$ nano -w /etc/portage/make.conf
$ mirrorselect -i -o &amp;gt;&amp;gt; /mnt/gentoo/etc/make.conf
$ emerge --sync

$ # /usr/src/linux の symlink を常に最新にしてくれるように、カーネルに symlink フラグを設定
$ echo 'sys-kernel/gentoo-sources symlink' &amp;gt;&amp;gt; /etc/portage/package.use

$ # システムの profile を変更 (default/linux/amd64/13.0/desktop/gnome/systemd にした)
$ eselect profile list
$ eselect profile set NUM

$ # カーネルをビルドするための準備 (ついでに vim と eix も入れておく)
$ emerge -av -j5 gentoo-sources vim eix
$ # (/usr/src/linux/.config をうまいこと生成する)

$ # このひとが起動してくるとインターネットに支障があるので切る
$ systemctl disable dhcpcd
Kernel の設定Systemd を使う場合、推奨されている設定があるので必要なものは有効にしておく。
https://wiki.gentoo.org/wiki/Systemd を参考に。加えて CONFIG_CMDLINE の設定も必要。この記事を参考に。CONFIG_CMDLINE=&quot;root=/dev/sda3 init=/usr/lib/systemd/systemd&quot;
それから、EFI のつく設定はだいたい y にした。 このスクリプト を /etc/kernel/postinst.d/efi に配置しておくと、カーネルのビルド後に適切な場所へイメージを配置してくれる。rc-update -&amp;gt; systemctlhttps://wiki.gentoo.org/wiki/Systemd を参考に。次のインストールで
まず時刻を正しくするんだ。Gentoo ハンドブックにもそう書いてる
Systemd で NetworkManager を有効にするの、最後あたりがいいかも

時刻を適当なままにしておいたおかげで、必要な Perl パッケージがインストールできなくなる悲しい時間の浪費があった。
設定は Systemd の timedatectl でやれる。
RTC in local TZ を設定しようとしたら、完全にサポートしてないみたいなことを言われたので BIOS の時刻を UTC にした。NetworkManager がうまく起動しない問題があって、権限に絡む問題みたいだけど、結局原因はよくわからなかった。
/etc/dbus-1/system.d/org.freedesktop.NetworkManager.conf の &amp;lt;policy context=&quot;default&quot;&amp;gt; 下を弄って無理矢理解決したけど別の問題がありそうで心配。
systemctl enable NetworkManager.service するのが早すぎたりしたのかなと想像してるけどよくわからない。See also
Gentoo Linux AMD64 ハンドブック
UEFI Boot な Gentoo をインストール - :soy_milk:
systemd - Gentoo Wiki
/etc/kernel/postinst.d/efi
</description>
<content:encoded>
<![CDATA[
    <p>年末に Funtoo でアップデートに失敗して、依存関係を何だかよくわからないちぐはぐな状態にしてしまったので、一旦環境を捨てて Gentoo を試してみることにした。
    その頃ちょうど Funtoo で <a href="http://bugs.funtoo.org/browse/FL-948" target="_blank">GNOME の入れ直しが難しい</a> 状態になっていて、どうせ入れ直すなら Gentoo の方が楽そうという理由から。
    そのときの記録を (断片的だけどだいたい順番に) 残しておく。
    足りない分はだいたい <a href="http://www.gentoo.org/doc/ja/handbook/handbook-amd64.xml?full=1" target="_blank">Gentoo Linux AMD64 ハンドブック</a> と同じ。</p><pre class="highlight plaintext">$ # パーティションの作成&#x000A;    $ parted&#x000A;    (parted) mklabel gpt&#x000A;    (parted) mkpart primary fat32 0% 512m&#x000A;    (parted) set 1 boot on&#x000A;    (parted) mkpart primary linux-swap 512m 1024m&#x000A;    (parted) mkpart pimrary ext4 1024m -1s&#x000A;    &#x000A;    $ # ファイルシステムの作成&#x000A;    $ mkfs.vfat -F 32 /dev/sda1&#x000A;    $ mkswap /dev/sda2&#x000A;    $ swapon /dev/sda2&#x000A;    $ mkfs.ext4 /dev/sda3&#x000A;    &#x000A;    $ # ファイルシステムのマウント、chroot&#x000A;    $ mount /dev/sda3 /mnt/gentoo&#x000A;    $ mkdir -p /mnt/gentoo/boot/efi&#x000A;    $ mount /dev/sda1 /mnt/gentoo/boot/efi&#x000A;    $ cd /mnt/gentoo&#x000A;    $ # (stage3 と portage を落としてきて展開)&#x000A;    $ mount -t proc none proc&#x000A;    $ mount --rbind /dev dev&#x000A;    $ cp /etc/resolv.conf /mnt/gentoo/etc/&#x000A;    $ chroot /mnt/gentoo /bin/bash&#x000A;    $ env-update&#x000A;    $ source /etc/profile&#x000A;    $ export PS1="(chroot) $PS1"&#x000A;    &#x000A;    $ # タイムゾーンの設定&#x000A;    $ # (BIOS の設定に応じて /etc/conf.d/hwclock で clock="local" にする必要があるかも。うまいことやって)&#x000A;    $ cp -p /usr/share/zoneinfo/Asia/Tokyo /etc/localtime&#x000A;    &#x000A;    $ # make.conf の設定とか&#x000A;    $ nano -w /etc/portage/make.conf&#x000A;    $ mirrorselect -i -o &gt;&gt; /mnt/gentoo/etc/make.conf&#x000A;    $ emerge --sync&#x000A;    &#x000A;    $ # /usr/src/linux の symlink を常に最新にしてくれるように、カーネルに symlink フラグを設定&#x000A;    $ echo 'sys-kernel/gentoo-sources symlink' &gt;&gt; /etc/portage/package.use&#x000A;    &#x000A;    $ # システムの profile を変更 (default/linux/amd64/13.0/desktop/gnome/systemd にした)&#x000A;    $ eselect profile list&#x000A;    $ eselect profile set NUM&#x000A;    &#x000A;    $ # カーネルをビルドするための準備 (ついでに vim と eix も入れておく)&#x000A;    $ emerge -av -j5 gentoo-sources vim eix&#x000A;    $ # (/usr/src/linux/.config をうまいこと生成する)&#x000A;    &#x000A;    $ # このひとが起動してくるとインターネットに支障があるので切る&#x000A;    $ systemctl disable dhcpcd&#x000A;    </pre><h2>Kernel の設定</h2><p>Systemd を使う場合、推奨されている設定があるので必要なものは有効にしておく。
    <a href="https://wiki.gentoo.org/wiki/Systemd" target="_blank">https://wiki.gentoo.org/wiki/Systemd</a> を参考に。</p><p>加えて <code>CONFIG_CMDLINE</code> の設定も必要。<a href="http://hrysd.hatenablog.com/entry/2013/10/02/231108" target="_blank">この記事</a>を参考に。</p><pre class="highlight plaintext">CONFIG_CMDLINE="root=/dev/sda3 init=/usr/lib/systemd/systemd"&#x000A;    </pre><p>それから、<code>EFI</code> のつく設定はだいたい y にした。</p><p><a href="https://gist.github.com/ursm/3972978" target="_blank"> このスクリプト</a> を <code>/etc/kernel/postinst.d/efi</code> に配置しておくと、カーネルのビルド後に適切な場所へイメージを配置してくれる。</p><h2>rc-update -&gt; systemctl</h2><p><a href="https://wiki.gentoo.org/wiki/Systemd" target="_blank">https://wiki.gentoo.org/wiki/Systemd</a> を参考に。</p><h2>次のインストールで</h2><ul>
    <li>まず時刻を正しくするんだ。<a href="http://www.gentoo.org/doc/ja/handbook/handbook-amd64.xml?full=1#book_part1_chap5__chap1_sect1" target="_blank">Gentoo ハンドブック</a>にもそう書いてる</li>
    <li>Systemd で NetworkManager を有効にするの、最後あたりがいいかも</li>
    </ul>
    <p>時刻を適当なままにしておいたおかげで、必要な Perl パッケージがインストールできなくなる悲しい時間の浪費があった。
    設定は Systemd の <code>timedatectl</code> でやれる。
    <code>RTC in local TZ</code> を設定しようとしたら、完全にサポートしてないみたいなことを言われたので BIOS の時刻を UTC にした。</p><p>NetworkManager がうまく起動しない問題があって、権限に絡む問題みたいだけど、結局原因はよくわからなかった。
    <code>/etc/dbus-1/system.d/org.freedesktop.NetworkManager.conf</code> の <code>&lt;policy context="default"&gt;</code> 下を弄って無理矢理解決したけど別の問題がありそうで心配。
    <code>systemctl enable NetworkManager.service</code> するのが早すぎたりしたのかなと想像してるけどよくわからない。</p><h2>See also</h2><ul>
    <li><a href="http://www.gentoo.org/doc/ja/handbook/handbook-amd64.xml?full=1" target="_blank">Gentoo Linux AMD64 ハンドブック</a></li>
    <li><a href="http://hrysd.hatenablog.com/entry/2013/10/02/231108" target="_blank">UEFI Boot な Gentoo をインストール - :soy_milk:</a></li>
    <li><a href="https://wiki.gentoo.org/wiki/Systemd" target="_blank">systemd - Gentoo Wiki</a></li>
    <li><a href="https://gist.github.com/ursm/3972978" target="_blank">/etc/kernel/postinst.d/efi</a></li>
    </ul>
]]>
</content:encoded>
</item>
<item rdf:about='http://hibariya.github.com/entries/20140215/a0.html'>
<title>Rewriting Retter gem</title>
<link>http://hibariya.github.com/entries/20140215/a0.html</link>
<dc:date>2014-02-14T15:00:00Z</dc:date>
<description>Next version will be 1.0.0 (Current changes).</description>
<content:encoded>
<![CDATA[
    <p>Next version will be 1.0.0 (<a href="https://github.com/hibariya/retter/compare/eccee81600d16eadba15e55e80e7fcf6200d83e2...3a2d73b3afd3b54d62425dc2fea7ff881767dd28" target="_blank">Current changes</a>).</p>
]]>
</content:encoded>
</item>
<item rdf:about='http://hibariya.github.com/entries/20130418/a0.html'>
<title>春から学生になった</title>
<link>http://hibariya.github.com/entries/20130418/a0.html</link>
<dc:date>2013-04-17T15:00:00Z</dc:date>
<description>4月に、帝京大学理工学部情報科学科に入学した。通信教育課程なので、お仕事は継続。
大学は mizzy さんのエントリ のおかげで知った。今年で28歳になった。
10年前、本に関わる仕事をしようと思って編集の専門学校に進んだ。
それはそれなりにためになったけど、途中でもっと楽しいことを見つけて、まもなく小さな出版社を後にした。コードを書くのは楽しい。
このまま30年後もコードを書いていられるといいな。
ずっとコードを書くなら、もっと上手になるための努力は惜しまなくて良さそう。
だからちゃんと学ぼうと思う。</description>
<content:encoded>
<![CDATA[
    <p>4月に、帝京大学理工学部情報科学科に入学した。通信教育課程なので、お仕事は継続。
    大学は <a href="http://mizzy.org/blog/2012/04/14/1/" target="_blank">mizzy さんのエントリ</a> のおかげで知った。</p><p>今年で28歳になった。
    10年前、本に関わる仕事をしようと思って編集の専門学校に進んだ。
    それはそれなりにためになったけど、途中でもっと楽しいことを見つけて、まもなく小さな出版社を後にした。</p><p>コードを書くのは楽しい。
    このまま30年後もコードを書いていられるといいな。
    ずっとコードを書くなら、もっと上手になるための努力は惜しまなくて良さそう。
    だからちゃんと学ぼうと思う。</p>
]]>
</content:encoded>
</item>
<item rdf:about='http://hibariya.github.com/entries/20130218/a0.html'>
<title>東京競馬場へ馬をみにいった</title>
<link>http://hibariya.github.com/entries/20130218/a0.html</link>
<dc:date>2013-02-17T15:00:00Z</dc:date>
<description>前の2日間ほとんど自宅にこもって作業していたらとうとう集中できなくなったので、日曜日は奥さんと馬を見に行くことになった。
競馬について何も知らないまま府中にある東京競馬場に行ったら、フェブラリーステークスといわれる割と大事そうなレースをやっていた。天気の良い日に目の前を全力で走っている馬を見るのはとっても刺激的で良い気分転換になるのでおすすめ。
馬が走るのはだいたい30分に1回なので、その間次のレースの予想をしてごく少額(100円とか)で適当に投票すると多少エキサイティングかもしれない。
あとは、次のレースに出る馬のお披露目をする場所みたいなのもあって、よく手入れされた馬は綺麗なのでいちど見ておくと良さそう。東京競馬場は広くて比較的キレイで過ごしやすかった。
馬をみる席からは富士山も眺められる。
JRAのサイトは使いづらいのでどうにかしてほしい。</description>
<content:encoded>
<![CDATA[
    <p>前の2日間ほとんど自宅にこもって作業していたらとうとう集中できなくなったので、日曜日は奥さんと馬を見に行くことになった。
    競馬について何も知らないまま府中にある東京競馬場に行ったら、フェブラリーステークスといわれる割と大事そうなレースをやっていた。</p><p>天気の良い日に目の前を全力で走っている馬を見るのはとっても刺激的で良い気分転換になるのでおすすめ。
    馬が走るのはだいたい30分に1回なので、その間次のレースの予想をしてごく少額(100円とか)で適当に投票すると多少エキサイティングかもしれない。
    あとは、次のレースに出る馬のお披露目をする場所みたいなのもあって、よく手入れされた馬は綺麗なのでいちど見ておくと良さそう。</p><p>東京競馬場は広くて比較的キレイで過ごしやすかった。
    馬をみる席からは富士山も眺められる。
    JRAのサイトは使いづらいのでどうにかしてほしい。</p>
]]>
</content:encoded>
</item>
<item rdf:about='http://hibariya.github.com/entries/20130105/a0.html'>
<title>reditor gem を更新した</title>
<link>http://hibariya.github.com/entries/20130105/a0.html</link>
<dc:date>2013-01-04T15:00:00Z</dc:date>
<description>Reditor は、gem や pure ruby な Ruby 標準添付ライブラリを $EDITOR で開くためのコマンドラインツールで、インストールすると bundle open や gem edit に似たコマンド reditor を使えるようになる。
今回はライブラリが見つからなかったときに候補を出す機能を追加したのだった。require するときは active_support なのに gem の名前は activesupport みたいな gem が結構あって、じゃあ reditor で開くときは今までどんな感じだったかというと、  $ reditor activesupport  # 開ける
  $ reditor active_support # 開けない
という感じ。
gem によって &quot;アンダースコアが入るか入らないか&quot; とか、他にも &quot;名前が単数形か複数形か&quot; とか忘れてしまうことは割とある。
開きたい gem を普段使っていなかったり gem の名前がキラキラしていれば尚更忘れやすい。
だけどこういう、名前を曖昧にしか思い出せないときにあっけなく失敗してしまうのは悲しい。
そこで、与えられた名前でライブラリを見つけられなかったときには候補っぽいものを出して選べるようにした。$ reditor active_support
[0] actionmailer
[1] actionpack
[2] activemodel
[3] activerecord
[4] activeresource
[5] activesupport
Choose number of library [0]&amp;gt; 5 # activesupport を開ける
一覧は単純にソートしているだけで、本来なら activesupport が一番上に来て欲しいところだけど、それは追々。
gem の名前をある程度適当に与えても候補から選べるようになったので、思い出すための面倒な手間が減りそう。</description>
<content:encoded>
<![CDATA[
    <p><a href="https://github.com/hibariya/reditor">Reditor</a> は、gem や pure ruby な Ruby 標準添付ライブラリを $EDITOR で開くためのコマンドラインツールで、インストールすると bundle open や gem edit に似たコマンド reditor を使えるようになる。
    今回はライブラリが見つからなかったときに候補を出す機能を追加したのだった。</p><p>require するときは active_support なのに gem の名前は activesupport みたいな gem が結構あって、じゃあ reditor で開くときは今までどんな感じだったかというと、</p><pre class="highlight shell">  <span class="nv">$ </span>reditor activesupport  <span class="c"># 開ける</span>&#x000A;      <span class="nv">$ </span>reditor active_support <span class="c"># 開けない</span>&#x000A;    </pre><p>という感じ。
    gem によって "アンダースコアが入るか入らないか" とか、他にも "名前が単数形か複数形か" とか忘れてしまうことは割とある。
    開きたい gem を普段使っていなかったり gem の名前がキラキラしていれば尚更忘れやすい。
    だけどこういう、名前を曖昧にしか思い出せないときにあっけなく失敗してしまうのは悲しい。
    そこで、与えられた名前でライブラリを見つけられなかったときには候補っぽいものを出して選べるようにした。</p><pre class="highlight shell"><span class="gp">$ </span>reditor active_support&#x000A;    <span class="o">[</span>0] actionmailer&#x000A;    <span class="o">[</span>1] actionpack&#x000A;    <span class="o">[</span>2] activemodel&#x000A;    <span class="o">[</span>3] activerecord&#x000A;    <span class="o">[</span>4] activeresource&#x000A;    <span class="o">[</span>5] activesupport&#x000A;    Choose number of library <span class="o">[</span>0]&gt; 5 <span class="c"># activesupport を開ける</span>&#x000A;    </pre><p>一覧は単純にソートしているだけで、本来なら activesupport が一番上に来て欲しいところだけど、それは追々。
    gem の名前をある程度適当に与えても候補から選べるようになったので、思い出すための面倒な手間が減りそう。</p>
]]>
</content:encoded>
</item>
<item rdf:about='http://hibariya.github.com/entries/20130105/a1.html'>
<title>cline gem を更新した</title>
<link>http://hibariya.github.com/entries/20130105/a1.html</link>
<dc:date>2013-01-04T15:00:00Z</dc:date>
<description>Cline は、フィードとか GitHub の Activity を収集(一定周期でポーリング)してきて、terminal で簡単に垂れ流し表示するためにつくったやつ。コミットログを見る感じだと数カ月ぶりのバージョンアップ。
cline をリリースした。
サブコマンドの使い方が変わってしまったのでメジャーバージョンをひとつインクリメント。デーモン化できるようにした今の使い方だと screen を起動すると 3 つの cline プロセスが起動するようになっていて、ひとつあたりのメモリ使用量が割と多めなのだった。
この更新で、cline のサーバを起動できるようにして、サーバが起動していたらそれ以降に起動したプロセスは socket 越しにいろいろ取りに行くようにした。起動とか停止とか:  $ cline server start   # 起動
  $ cline server stop    # 停止
  $ cline server reload  # ~/.cline/config の再読み込み
.zshrc などにこういうのを貼り付けておいて勝手に起動してくれるようにすると良さそう。if ! [ -e ~/.cline/cline.sock ] ; then
  cline server start
fi
tick コマンドの使い方が変わった  $ cline tick OFFSET INTERVAL
から  $ cline tick INTERVAL OFFSET
に変更。
どちらも省略できるのだけど、offset よりは interval だけを指定することの方が多そうなので入れ替え。</description>
<content:encoded>
<![CDATA[
    <p><a href="https://github.com/hibariya/cline">Cline</a> は、フィードとか GitHub の Activity を収集(一定周期でポーリング)してきて、terminal で簡単に垂れ流し表示するためにつくったやつ。</p><p>コミットログを見る感じだと数カ月ぶりのバージョンアップ。
    <a href="https://rubygems.org/gems/cline/">cline</a> をリリースした。
    サブコマンドの使い方が変わってしまったのでメジャーバージョンをひとつインクリメント。</p><h3>デーモン化できるようにした</h3><p>今の使い方だと screen を起動すると 3 つの cline プロセスが起動するようになっていて、ひとつあたりのメモリ使用量が割と多めなのだった。
    この更新で、cline のサーバを起動できるようにして、サーバが起動していたらそれ以降に起動したプロセスは socket 越しにいろいろ取りに行くようにした。</p><p>起動とか停止とか:</p><pre class="highlight shell">  <span class="nv">$ </span>cline server start   <span class="c"># 起動</span>&#x000A;      <span class="nv">$ </span>cline server stop    <span class="c"># 停止</span>&#x000A;      <span class="nv">$ </span>cline server reload  <span class="c"># ~/.cline/config の再読み込み</span>&#x000A;    </pre><p>.zshrc などにこういうのを貼り付けておいて勝手に起動してくれるようにすると良さそう。</p><pre class="highlight shell"><span class="k">if</span> ! <span class="o">[</span> -e ~/.cline/cline.sock <span class="o">]</span> ; <span class="k">then&#x000A;      </span>cline server start&#x000A;    <span class="k">fi</span>&#x000A;    </pre><h3>tick コマンドの使い方が変わった</h3><pre class="highlight shell">  <span class="nv">$ </span>cline tick OFFSET INTERVAL&#x000A;    </pre><p>から</p><pre class="highlight shell">  <span class="nv">$ </span>cline tick INTERVAL OFFSET&#x000A;    </pre><p>に変更。
    どちらも省略できるのだけど、offset よりは interval だけを指定することの方が多そうなので入れ替え。</p>
]]>
</content:encoded>
</item>
<item rdf:about='http://hibariya.github.com/entries/20130102/a0.html'>
<title>PROMPTを2階建てにした</title>
<link>http://hibariya.github.com/entries/20130102/a0.html</link>
<dc:date>2013-01-01T15:00:00Z</dc:date>
<description>結構前からだったのだけど、oh-my-zsh が割と良くて乗り換えたはいいが気に入ったテーマだけは見つからなかったので自分で適当に変えたのだった。
いままでは雑多な情報はRPROMPTに出すようにしていたのだけど、同僚から影響を受けて二階建てに。
(Kinesis といい Funtoo といい、去年は何かと影響を受けまくり)カスタマイズしているうちにごちゃごちゃしてしまった PROMPT が出しているのはこんなの。
ユーザ@ホスト:今居る場所
時刻
直前のコマンドの戻り値
Ruby のバージョン
git リポジトリの状態・ハッシュの先頭数文字・ブランチ
$SHLVL

いろいろ表示している情報はたまに便利に思うこともあるけど、割と自己満足なのでPROMPT=&quot;%% &quot;とかにしてもたぶん生活には困らない。今年もよろしくお願いします。</description>
<content:encoded>
<![CDATA[
    <p>結構前からだったのだけど、oh-my-zsh が割と良くて乗り換えたはいいが気に入ったテーマだけは見つからなかったので自分で適当に変えたのだった。
    いままでは雑多な情報はRPROMPTに出すようにしていたのだけど、同僚から影響を受けて二階建てに。
    (Kinesis といい Funtoo といい、去年は何かと影響を受けまくり)</p><p><img src="/images/prompt_2013_1.png" alt="prompt_2013_1"></p><p>カスタマイズしているうちにごちゃごちゃしてしまった <a href="https://github.com/hibariya/config/blob/a7368884c6b39dff628ef9fc75ce595a5a96d878/_zsh/oh-my-zsh#L56">PROMPT</a> が出しているのはこんなの。</p><ul>
    <li>ユーザ@ホスト:今居る場所</li>
    <li>時刻</li>
    <li>直前のコマンドの戻り値</li>
    <li>Ruby のバージョン</li>
    <li>git リポジトリの状態・ハッシュの先頭数文字・ブランチ</li>
    <li>$SHLVL</li>
    </ul>
    <p>いろいろ表示している情報はたまに便利に思うこともあるけど、割と自己満足なので<code>PROMPT="%% "</code>とかにしてもたぶん生活には困らない。</p><p>今年もよろしくお願いします。</p>
]]>
</content:encoded>
</item>
<item rdf:about='http://hibariya.github.com/entries/20121206/a0.html'>
<title>自宅用に Kinesis を買った</title>
<link>http://hibariya.github.com/entries/20121206/a0.html</link>
<dc:date>2012-12-05T15:00:00Z</dc:date>
<description>慣れたら使い心地良さそうだなーと思っていた Kinesis さん、いきなり仕事で使うと全然仕事が進まなくなるのでまずは自宅用に購入。
以前同僚から貸し出してもらって挫折したこともあり、今回は少しは使える状態からスタート。
奥さんが仕事から帰ってきたときに早速自慢したのだけど、金額を白状したら蹴られた。</description>
<content:encoded>
<![CDATA[
    <p>慣れたら使い心地良さそうだなーと思っていた Kinesis さん、いきなり仕事で使うと全然仕事が進まなくなるのでまずは自宅用に購入。
    以前同僚から貸し出してもらって挫折したこともあり、今回は少しは使える状態からスタート。
    奥さんが仕事から帰ってきたときに早速自慢したのだけど、金額を白状したら蹴られた。</p>
]]>
</content:encoded>
</item>
<item rdf:about='http://hibariya.github.com/entries/20121125/a0.html'>
<title>RubyConf 2012</title>
<link>http://hibariya.github.com/entries/20121125/a0.html</link>
<dc:date>2012-11-24T15:00:00Z</dc:date>
<description>先月末から今月の頭は角谷さんと RubyConf 2012 に行っていた。行きで寄ったロサンゼルスの気候は、勝手に想像していたカリフォルニアとだいたい一緒で、乾燥していたけどいい天気で過ごしやすかった。
コロラド州デンバーは、空港からダウンタウンまでのタクシー窓からの景色が大自然すぎて、本当に屋根のあるところで開催されるのだろうかと心配になるほど。
もちろんダウンタウンはちゃんとあったし、会場は想像以上に立派だった。
デンバーのマンホールは蒸気を吐いていて、何も知らずに興味本位で湯気らしきものに触ったらひどい目にあった。会期中に見た発表のスライドを pinboard にまとめているところだけど、まだ全部集められてない。
ビデオは Confreaks のサイトから見られるけど、すべての発表分あるわけじゃないみたい。RubyConf に行く半年くらい前から少しずつ英語の勉強をしたりオンライン英会話したりといろいろやって来てはいた。
ただ、どうにも英語力の低さは無視できなくて、聞き取りやすい発表はついていくのに精一杯、それ以外はだいたい振り切られてスライドを眺めていた。復習が必要そう。RubyConf 2日目は Engine Yard のパーティーに行って joshk や tenderlove に挨拶して、ステッカーをもらうなどした。
それから拙い英語で何人かの Rubyists と話したりしたのだけど、最近 Ruby 始めたんだーという人が思ったよりも多かったのが印象的だった。実用的だった話松田さんの Ruby 2.0 on Rails は分かりやすかったし、新しい機能をどう使えるか、というのに大変参考になった。
特にprepend、キーワード引数の動きを理解するのに助けになった。Ben Orenstein の Refactoring from Good to Great は、ライブコーディングで Ruby でのリファクタリングについて説明していた。
（もう一回見たいのだけど、ライブコーディングでスライドが無いうえにまだ動画は見つからなかった。）咳さんと井上さんの dRuby の話 は、はじめはデモをまじえて dRuby の動きを丁寧に解説。
それから dRuby でのオブジェクトのやりとりをどうやって実現しているのかを、デモとコードで説明していた。
スライドに出てくるコード片が面白くて（興味深くて）、じっくりソースコードを読んでみたくなる発表だった。
drb のコードを読むには reditor が便利。刺激的な話OODB や GemStone というものについて全く知識がなかったので終始ポカーンと口を開けて聞いていたのが Jesse Cooke の MagLev の発表だった。
Proc も 継続も、なんでも保存できるってすごい。
まだ用途が思い浮かばないけど、これはちょっと触ってみたい。Allow me to reintroduce myself. My name is MagLev.もうひとつは Xiki (executable wiki) の発表で、これはエディタを使ったWikiのような新しいシェルということらしい（結構前からあるらしいけど知らなかった）。
エディタからDBを更新できたり、ブラウザのインスペクタみたいにDOMを辿ってHTMLを編集できたり、それがすぐブラウザに反映されたり、オルガンを弾いたり、尋常じゃない動きをしていた。
カスタマイズは ruby でできるらしい。でもまずは Emacs を使えるようになる必要がありそう。
驚きと笑いで会場はだいぶ盛り上がっていた気がする。初見のひとは動画を見てるだけで面白いと思う。Xiki: the Rubyfied Next-Generation Shell ConsoleFix shoe strings1日目のキーノート Reinventing Wheels of the Future。
プログラミング言語はすでにあるけど Ruby をつくった話。もしも車輪の再発明だと言われても、動機があるなら進めばいいし、それは多様性につながる。
多様性は貴重な時間を消費するかもしれないけど、それは革新につながるためのコストだ。今は21世紀だけど、世界中には靴紐みたいなくだらない設計がたくさんある。
新しいプロジェクトをスタートしたり、すでにあるプロジェクトに参加したりすることによって、それを解決しよう。
(Ruby 2.0 にバグレポートとパッチを!)(より良い)車輪を再発明しよう。というような話だったと理解してて、いちばん頭に残ってる。来年はマイアミらしいフロリダの空は黄色いって聞いたんだけど本当なのかしら。今回のことで、英語については本当にこたえたので、当分は真面目にやることになりそう。
あとは、これまで独学でカバーしてきた部分について、きちんと勉強しなおすのは避けられないという確かな結論を得られた。
だいぶ遠回りをしたけど、来年から忙しくなりそう。永和に転職して 800 日以上経っていたRubyConf は自分の中で大きな出来事だったこともあって、いろいろと記憶を巡っていたら、転職して 2 年以上経っているということに気づく。
今でさえ何もかも途中だけど、思い返せばコードの書き方や考え方はだいぶ変わってしまった。
今回 RubyConf に行けたことはもちろん、自分の望む方向に進もうとしたときに惜しみなく良い影響を与えてもらえたことに感謝。</description>
<content:encoded>
<![CDATA[
    <p><img src="http://distilleryimage1.s3.amazonaws.com/ead618f6256211e290cd22000a1f90d7_7.jpg" alt=""></p><p>先月末から今月の頭は角谷さんと RubyConf 2012 に行っていた。</p><p>行きで寄ったロサンゼルスの気候は、勝手に想像していたカリフォルニアとだいたい一緒で、乾燥していたけどいい天気で過ごしやすかった。
    コロラド州デンバーは、空港からダウンタウンまでのタクシー窓からの景色が大自然すぎて、本当に屋根のあるところで開催されるのだろうかと心配になるほど。
    もちろんダウンタウンはちゃんとあったし、会場は想像以上に立派だった。
    デンバーのマンホールは蒸気を吐いていて、何も知らずに興味本位で湯気らしきものに触ったらひどい目にあった。</p><p>会期中に見た発表のスライドを <a href="https://pinboard.in/u:hibariya/t:rubyconf/">pinboard</a> にまとめているところだけど、まだ全部集められてない。
    ビデオは <a href="http://confreaks.com/events/rubyconf2012">Confreaks</a> のサイトから見られるけど、すべての発表分あるわけじゃないみたい。</p><p>RubyConf に行く半年くらい前から少しずつ英語の勉強をしたりオンライン英会話したりといろいろやって来てはいた。
    ただ、どうにも英語力の低さは無視できなくて、聞き取りやすい発表はついていくのに精一杯、それ以外はだいたい振り切られてスライドを眺めていた。復習が必要そう。</p><p>RubyConf 2日目は Engine Yard のパーティーに行って joshk や tenderlove に挨拶して、ステッカーをもらうなどした。
    それから拙い英語で何人かの Rubyists と話したりしたのだけど、最近 Ruby 始めたんだーという人が思ったよりも多かったのが印象的だった。</p><h2>実用的だった話</h2><p>松田さんの <a href="http://confreaks.com/videos/1275-rubyconf2012-ruby-2-0-on-rails">Ruby 2.0 on Rails</a> は分かりやすかったし、新しい機能をどう使えるか、というのに大変参考になった。
    特にprepend、キーワード引数の動きを理解するのに助けになった。</p><p>Ben Orenstein の Refactoring from Good to Great は、ライブコーディングで Ruby でのリファクタリングについて説明していた。
    （もう一回見たいのだけど、ライブコーディングでスライドが無いうえにまだ動画は見つからなかった。）</p><p><a href="http://confreaks.com/videos/1296-rubyconf2012-rails-is-a-follower-what-we-can-learn-from-druby-s-metaprogramming-magic">咳さんと井上さんの dRuby の話</a> は、はじめはデモをまじえて dRuby の動きを丁寧に解説。
    それから dRuby でのオブジェクトのやりとりをどうやって実現しているのかを、デモとコードで説明していた。
    スライドに出てくるコード片が面白くて（興味深くて）、じっくりソースコードを読んでみたくなる発表だった。
    drb のコードを読むには <a href="http://rubygems.org/gems/reditor">reditor</a> が便利。</p><h2>刺激的な話</h2><p>OODB や GemStone というものについて全く知識がなかったので終始ポカーンと口を開けて聞いていたのが Jesse Cooke の <a href="http://maglev.github.com/">MagLev</a> の発表だった。
    Proc も 継続も、なんでも保存できるってすごい。
    まだ用途が思い浮かばないけど、これはちょっと触ってみたい。</p><p><a href="http://confreaks.com/videos/1269-rubyconf2012-allow-me-to-reintroduce-myself-my-name-is-maglev">Allow me to reintroduce myself. My name is MagLev.</a></p><p>もうひとつは Xiki (executable wiki) の発表で、これはエディタを使ったWikiのような新しいシェルということらしい（結構前からあるらしいけど知らなかった）。
    エディタからDBを更新できたり、ブラウザのインスペクタみたいにDOMを辿ってHTMLを編集できたり、それがすぐブラウザに反映されたり、オルガンを弾いたり、尋常じゃない動きをしていた。
    カスタマイズは ruby でできるらしい。でもまずは Emacs を使えるようになる必要がありそう。
    驚きと笑いで会場はだいぶ盛り上がっていた気がする。初見のひとは動画を見てるだけで面白いと思う。</p><p><a href="http://confreaks.com/videos/1297-rubyconf2012-xiki-the-rubyfied-next-generation-shell-console">Xiki: the Rubyfied Next-Generation Shell Console</a></p><h2>Fix shoe strings</h2><p>1日目のキーノート <a href="http://confreaks.com/videos/1268-rubyconf2012-keynote-reinventing-wheels-of-the-future">Reinventing Wheels of the Future</a>。
    プログラミング言語はすでにあるけど Ruby をつくった話。</p><p>もしも車輪の再発明だと言われても、動機があるなら進めばいいし、それは多様性につながる。
    多様性は貴重な時間を消費するかもしれないけど、それは革新につながるためのコストだ。</p><p>今は21世紀だけど、世界中には靴紐みたいなくだらない設計がたくさんある。
    新しいプロジェクトをスタートしたり、すでにあるプロジェクトに参加したりすることによって、それを解決しよう。
    (Ruby 2.0 にバグレポートとパッチを!)</p><p>(より良い)車輪を再発明しよう。</p><p>というような話だったと理解してて、いちばん頭に残ってる。</p><h2>来年はマイアミらしい</h2><p>フロリダの空は黄色いって聞いたんだけど本当なのかしら。</p><p>今回のことで、英語については本当にこたえたので、当分は真面目にやることになりそう。
    あとは、これまで独学でカバーしてきた部分について、きちんと勉強しなおすのは避けられないという確かな結論を得られた。
    だいぶ遠回りをしたけど、来年から忙しくなりそう。</p><h2>永和に転職して 800 日以上経っていた</h2><p>RubyConf は自分の中で大きな出来事だったこともあって、いろいろと記憶を巡っていたら、転職して 2 年以上経っているということに気づく。
    今でさえ何もかも途中だけど、思い返せばコードの書き方や考え方はだいぶ変わってしまった。
    今回 RubyConf に行けたことはもちろん、自分の望む方向に進もうとしたときに惜しみなく良い影響を与えてもらえたことに感謝。</p>
]]>
</content:encoded>
</item>
<item rdf:about='http://hibariya.github.com/entries/20120928/a0.html'>
<title>Gentoo 環境を手に入れてた</title>
<link>http://hibariya.github.com/entries/20120928/a0.html</link>
<dc:date>2012-09-27T15:00:00Z</dc:date>
<description>この前 30% 割引をやっているのを同僚に教えてもらって Thinkpad の X230 を購入。
半月くらいかけてねんがんの Gentoo (Funtoo) + Awesome WM 環境を手に入れた。
細かいところはまだ設定が足りないけど、毎日問題なく使えている感じ。しいて言えばもっと大きな机を買えばよかった。参考にしたのは、
http://lab.ursm.jp/blog/2011/08/28/funtoo-on-thinkpad-x220/
http://www.thinkwiki.org/wiki/InstallingGentooonaThinkPad_X220
http://www.funtoo.org/wiki/FuntooLinuxInstallation

あたり。
3つ目の画面は USB でつなぐ DisplayLink のアダプタをつかっていて、こことかを参考にしたら一応表示はできた（自分の設定に不備があるのか、使い勝手は最悪だけど）。それから、画面のミラーリングが解除できなかったり、ImageMagick が依存で入ってきたらいつの間にか壁紙が ImageMagick のおっさんの画像がすり替えられたり意味不明な現象が多発したので頭を抱えながらいろいろ手間取った結果、結局 ursm 先生の make.conf とかの設定を参考にさせてもらったら治った。
このへんのセットアップはまだまだ素振りが必要そうで全然まとめられてない。環境を変えてよかったことは、タイル型WMがだいぶいい感じなのと、これまで自分が作った gem が何かしらうまく動かなかったりすることを発見できたことくらい。
でもタイル型WMっぽいことは実は Mac でもできるらしい。
なのでよかったことはまだあんまりない。気分転換なのでは。</description>
<content:encoded>
<![CDATA[
    <p>この前 30% 割引をやっているのを同僚に教えてもらって Thinkpad の X230 を購入。
    半月くらいかけてねんがんの Gentoo (Funtoo) + Awesome WM 環境を手に入れた。
    細かいところはまだ設定が足りないけど、毎日問題なく使えている感じ。しいて言えばもっと大きな机を買えばよかった。</p><p><img src="http://distilleryimage3.instagram.com/1da383da056111e2b70422000a1e8867_7.jpg" alt="大きな机がほしい"></p><p>参考にしたのは、</p><ul>
    <li>http://lab.ursm.jp/blog/2011/08/28/funtoo-on-thinkpad-x220/</li>
    <li>http://www.thinkwiki.org/wiki/Installing<em>Gentoo</em>on<em>a</em>ThinkPad_X220</li>
    <li>http://www.funtoo.org/wiki/Funtoo<em>Linux</em>Installation</li>
    </ul>
    <p>あたり。
    3つ目の画面は USB でつなぐ DisplayLink のアダプタをつかっていて、<a href="http://wiki.gentoo.org/wiki/DisplayLink">ここ</a>とかを参考にしたら一応表示はできた（自分の設定に不備があるのか、使い勝手は最悪だけど）。</p><p>それから、画面のミラーリングが解除できなかったり、ImageMagick が依存で入ってきたらいつの間にか壁紙が ImageMagick のおっさんの画像がすり替えられたり意味不明な現象が多発したので頭を抱えながらいろいろ手間取った結果、結局 <a href="https://twitter.com/ursm">ursm</a> 先生の make.conf とかの設定を参考にさせてもらったら治った。
    このへんのセットアップはまだまだ素振りが必要そうで全然まとめられてない。</p><p>環境を変えてよかったことは、タイル型WMがだいぶいい感じなのと、これまで自分が作った gem が何かしらうまく動かなかったりすることを発見できたことくらい。
    でもタイル型WMっぽいことは実は Mac でもできるらしい。
    なのでよかったことはまだあんまりない。気分転換なのでは。</p>
]]>
</content:encoded>
</item>
<item rdf:about='http://hibariya.github.com/entries/20120923/a0.html'>
<title>札幌RubyKaigi2012でLTしてきたこと #sprk2012</title>
<link>http://hibariya.github.com/entries/20120923/a0.html</link>
<dc:date>2012-09-22T15:00:00Z</dc:date>
<description>先週は SapporoRubyKaigi2012 で北海道に行ってきた。
快適な Kaigi を提供してくださった実行委員・スタッフの方々に感謝。
2日目の15日に LT 枠で、Coding for yourself というタイトルで5分間話してきた。Ruby を使って自分や身の回りの人の生活を便利にしたいという漠然とした希望はあるけれど、漠然としているから何をすればいいかわからないし、何もできなかった。
でもせめて、自分のコードで自分の望みを叶えることくらいはできるようでありたくて、まずは黙々と欲しいものをつくって公開することにした。
その結果、自分の望みを叶えることさえ難しいということが分かった。
それは確かに残念なお知らせだったけど、思わぬ収穫として、つくったものを使ってくれるひとが現れたり、新たなフィードバックが得られたりもした。
欲しいものを自分のために用意してそれを公開することは、どうやら無駄ではなさそう。SapporoRubyKaigi2012 の全部のセッションを見終わってはいないので、いろいろ落ち着いたら動画を見なおしたい（10月中旬までは身内でいろいろやっているので落ち着かない）。会期中は RubyKaigi2011 以前に知り合ったひとたちとまた会えたし、万葉方面とペパボ方面で今まで知り合っていなかったひとたちに挨拶できた。
それから、自給自足プログラミング、という発表にとてもシンパシーを感じた。
うまく言えないけど、コードを書いてるひとに惹かれるのだと思う。</description>
<content:encoded>
<![CDATA[
    <p>先週は SapporoRubyKaigi2012 で北海道に行ってきた。
    快適な Kaigi を提供してくださった実行委員・スタッフの方々に感謝。
    2日目の15日に LT 枠で、<a href="https://speakerdeck.com/u/hibariya/p/coding-for-yourself">Coding for yourself</a> というタイトルで5分間話してきた。</p><div style="width: 500px;"><script src="http://speakerdeck.com/embed/505556424a7779000200e6b0.js"></script></div><p>Ruby を使って自分や身の回りの人の生活を便利にしたいという漠然とした希望はあるけれど、漠然としているから何をすればいいかわからないし、何もできなかった。
    でもせめて、自分のコードで自分の望みを叶えることくらいはできるようでありたくて、まずは黙々と欲しいものをつくって公開することにした。
    その結果、自分の望みを叶えることさえ難しいということが分かった。
    それは確かに残念なお知らせだったけど、思わぬ収穫として、つくったものを使ってくれるひとが現れたり、新たなフィードバックが得られたりもした。
    欲しいものを自分のために用意してそれを公開することは、どうやら無駄ではなさそう。</p><p>SapporoRubyKaigi2012 の全部のセッションを見終わってはいないので、いろいろ落ち着いたら動画を見なおしたい（10月中旬までは身内でいろいろやっているので落ち着かない）。</p><p>会期中は RubyKaigi2011 以前に知り合ったひとたちとまた会えたし、万葉方面とペパボ方面で今まで知り合っていなかったひとたちに挨拶できた。
    それから、<a href="http://route477.net/files/sprk2012/">自給自足プログラミング</a>、という発表にとてもシンパシーを感じた。
    うまく言えないけど、コードを書いてるひとに惹かれるのだと思う。</p>
]]>
</content:encoded>
</item>
<item rdf:about='http://hibariya.github.com/entries/20120830/a0.html'>
<title>map が返す Enumerator のこと</title>
<link>http://hibariya.github.com/entries/20120830/a0.html</link>
<dc:date>2012-08-29T15:00:00Z</dc:date>
<description>Enumerable が提供する色々なメソッドは、受け取る筈のブロックが与えられなかった場合 Enumerator オブジェクトを返す。
Enumerator オブジェクトは、each.with_index.with_objectみたいに each にブロックを渡さずに使うとかいうのにたまに使う。
あとは、外部イテレータのために使ったり、each 以外のメソッドを使って Enumerable のメソッドを使ったりするのに使える。each 以外の繰り返しを行うメソッドも、ブロックを受け取らなかったときは Enumerator オブジェクトを返したりする。Enumerable#map とか。%w(a b c).map # =&amp;gt; #&amp;lt;Enumerator: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]:map&amp;gt;
これを外部イテレータとして使う機会は今のところない。
（※元々「何に使うの」くらいに書いてたけど、map.with_indexはやるよねというツッコミが。たしかに）使う場面は無くてもせめて使い方くらいは知っておきたいなあと思って Asakusa.rb で人に聞いたりソースに書かれたコメントを読んだりしたら何となく使い方が分かってきた。疑問はふたつあった。
ブロックの戻り値にあたる値はどこにどうやって渡せばいいのか
どうすればメソッドの戻り値を得られるのか

それぞれ以下のような感じ。
ブロックの戻り値（つまりyieldの戻り値になる値）は Enumerator#feed に渡す
メソッドの戻り値は StopIteration#result から得られる

もっとも、↓だけでは何だかありがたみが分からないけど。ary  = %w(alice bob carol)
enum = ary.map

while true
  begin
    val = enum.next # ブロック引数的なもの

    enum.feed val.upcase # ブロックの戻り値的なもの
  rescue StopIteration =&amp;gt; e
    p e.result # [&quot;ALICE&quot;, &quot;BOB&quot;, &quot;CAROL&quot;] と表示

    break
  end
end
while じゃなくて Kernel.#loop を使うと StopIteration を捕まえてループから脱出してくれたりする。</description>
<content:encoded>
<![CDATA[
    <p>Enumerable が提供する色々なメソッドは、受け取る筈のブロックが与えられなかった場合 Enumerator オブジェクトを返す。
    Enumerator オブジェクトは、<code>each.with_index.with_object</code>みたいに each にブロックを渡さずに使うとかいうのにたまに使う。
    あとは、外部イテレータのために使ったり、each 以外のメソッドを使って Enumerable のメソッドを使ったりするのに使える。</p><p>each 以外の繰り返しを行うメソッドも、ブロックを受け取らなかったときは Enumerator オブジェクトを返したりする。Enumerable#map とか。</p><pre class="highlight ruby"><span class="sx">%w(a b c)</span><span class="p">.</span><span class="nf">map</span> <span class="c1"># =&gt; #&lt;Enumerator: ["a", "b", "c"]:map&gt;</span>&#x000A;    </pre><p>これを外部イテレータとして使う機会は今のところない。
    （※元々「何に使うの」くらいに書いてたけど、<code>map.with_index</code>はやるよねというツッコミが。たしかに）</p><p>使う場面は無くてもせめて使い方くらいは知っておきたいなあと思って Asakusa.rb で人に聞いたりソースに書かれたコメントを読んだりしたら何となく使い方が分かってきた。</p><p>疑問はふたつあった。</p><ul>
    <li>ブロックの戻り値にあたる値はどこにどうやって渡せばいいのか</li>
    <li>どうすればメソッドの戻り値を得られるのか</li>
    </ul>
    <p>それぞれ以下のような感じ。</p><ul>
    <li>ブロックの戻り値（つまりyieldの戻り値になる値）は Enumerator#feed に渡す</li>
    <li>メソッドの戻り値は StopIteration#result から得られる</li>
    </ul>
    <p>もっとも、↓だけでは何だかありがたみが分からないけど。</p><pre class="highlight ruby"><span class="n">ary</span>  <span class="o">=</span> <span class="sx">%w(alice bob carol)</span>&#x000A;    <span class="n">enum</span> <span class="o">=</span> <span class="n">ary</span><span class="p">.</span><span class="nf">map</span>&#x000A;    &#x000A;    <span class="k">while</span> <span class="kp">true</span>&#x000A;      <span class="k">begin</span>&#x000A;        <span class="n">val</span> <span class="o">=</span> <span class="n">enum</span><span class="p">.</span><span class="nf">next</span> <span class="c1"># ブロック引数的なもの</span>&#x000A;    &#x000A;        <span class="n">enum</span><span class="p">.</span><span class="nf">feed</span> <span class="n">val</span><span class="p">.</span><span class="nf">upcase</span> <span class="c1"># ブロックの戻り値的なもの</span>&#x000A;      <span class="k">rescue</span> <span class="no">StopIteration</span> <span class="o">=&gt;</span> <span class="n">e</span>&#x000A;        <span class="nb">p</span> <span class="n">e</span><span class="p">.</span><span class="nf">result</span> <span class="c1"># ["ALICE", "BOB", "CAROL"] と表示</span>&#x000A;    &#x000A;        <span class="k">break</span>&#x000A;      <span class="k">end</span>&#x000A;    <span class="k">end</span>&#x000A;    </pre><p>while じゃなくて Kernel.#loop を使うと StopIteration を捕まえてループから脱出してくれたりする。</p>
]]>
</content:encoded>
</item>
<item rdf:about='http://hibariya.github.com/entries/20120731/a0.html'>
<title>簡単に Ruby のリファレンス・マニュアルを開く ruremai を色々直した</title>
<link>http://hibariya.github.com/entries/20120731/a0.html</link>
<dc:date>2012-07-30T15:00:00Z</dc:date>
<description>気がついたら色々な人から良い感じのパッチをもらったので取り込んで 0.0.3 をリリースしました。Ruremai はirbなどを使っている際に、メソッドのリファレンス・マニュアルをお手軽にブラウザで開くためのツールです。
require 'ruremai' すると、Method#rurema! が追加されます。例えば、「何かそれっぽいメソッドが記憶の片隅にあるんだけど、使い方がイマイチ思い出せない」ようなときに便利。hibariya@ ;-) irb
&amp;gt;&amp;gt; require 'ruremai'
=&amp;gt; false
&amp;gt;&amp;gt; ary = %w(alice bob carol)
=&amp;gt; [&quot;alice&quot;, &quot;bob&quot;, &quot;carol&quot;]
&amp;gt;&amp;gt; ary.method(:any?).rurema! # ここで唐突にブラウザが開く!
今回はいくつかの修正や機能追加があったのでした。
ショートカット Object#mean? の追加
大文字を含むメソッド名に対応できていなかったバグの修正
名前空間や特定のメソッドに対応できていなかったバグの修正と高速化

自分では気づかないようなバグへのパッチとか、あったら良さそうな機能がどんどん送られくる GitHub とっても便利。</description>
<content:encoded>
<![CDATA[
    <p>気がついたら色々な人から良い感じのパッチをもらったので取り込んで <a href="https://rubygems.org/gems/ruremai">0.0.3</a> をリリースしました。</p><p><a href="https://github.com/hibariya/ruremai">Ruremai</a> はirbなどを使っている際に、メソッドのリファレンス・マニュアルをお手軽にブラウザで開くためのツールです。
    <code>require 'ruremai'</code> すると、Method#rurema! が追加されます。</p><p>例えば、「何かそれっぽいメソッドが記憶の片隅にあるんだけど、使い方がイマイチ思い出せない」ようなときに便利。</p><pre class="highlight plaintext">hibariya@ ;-) irb&#x000A;    &gt;&gt; require 'ruremai'&#x000A;    =&gt; false&#x000A;    &gt;&gt; ary = %w(alice bob carol)&#x000A;    =&gt; ["alice", "bob", "carol"]&#x000A;    &gt;&gt; ary.method(:any?).rurema! # ここで唐突にブラウザが開く!&#x000A;    </pre><p>今回はいくつかの修正や機能追加があったのでした。</p><ul>
    <li><a href="https://github.com/hibariya/ruremai/pull/1">ショートカット Object#mean? の追加</a></li>
    <li><a href="https://github.com/hibariya/ruremai/pull/2">大文字を含むメソッド名に対応できていなかったバグの修正</a></li>
    <li><a href="https://github.com/hibariya/ruremai/pull/4">名前空間や特定のメソッドに対応できていなかったバグの修正と高速化</a></li>
    </ul>
    <p>自分では気づかないようなバグへのパッチとか、あったら良さそうな機能がどんどん送られくる GitHub とっても便利。</p>
]]>
</content:encoded>
</item>
<item rdf:about='http://hibariya.github.com/entries/20120723/a0.html'>
<title>簡単に Ruby のリファレンス・マニュアルを開く ruremai をつくった</title>
<link>http://hibariya.github.com/entries/20120723/a0.html</link>
<dc:date>2012-07-22T15:00:00Z</dc:date>
<description>Ruby リファレンスマニュアル、通称るりまを開くのが日頃から割と面倒だったので、irb からさっと開けるようなものを作った。ruremairequire すると Method#rurema! が追加される。これを呼び出すと、るりまの該当メソッドのページをブラウザで開く。  Object.method(:name).rurema!
APIDock とかも見るようにできるといいのかな。~/.irbrc あたりで require 'ruremai' しておくとよさそう。勉強などのお供に。</description>
<content:encoded>
<![CDATA[
    <p>Ruby リファレンスマニュアル、通称るりまを開くのが日頃から割と面倒だったので、irb からさっと開けるようなものを作った。</p><p><a href="https://github.com/hibariya/ruremai">ruremai</a></p><p>require すると Method#rurema! が追加される。これを呼び出すと、るりまの該当メソッドのページをブラウザで開く。</p><pre class="highlight ruby">  <span class="no">Object</span><span class="p">.</span><span class="nf">method</span><span class="p">(</span><span class="ss">:name</span><span class="p">).</span><span class="nf">rurema!</span>&#x000A;    </pre><p>APIDock とかも見るようにできるといいのかな。</p><p><code>~/.irbrc</code> あたりで <code>require 'ruremai'</code> しておくとよさそう。勉強などのお供に。</p>
]]>
</content:encoded>
</item>
<item rdf:about='http://hibariya.github.com/entries/20120602/a0.html'>
<title>社内で code についての発表をした</title>
<link>http://hibariya.github.com/entries/20120602/a0.html</link>
<dc:date>2012-06-01T15:00:00Z</dc:date>
<description>@koic先輩に「新卒向けにライブラリやツールを作ることについての話をしてよ」と言われたので二つ返事で受けさせてもらったのだった。自分のための code を書こう永和に転職して暫く経ったある日、金曜の夜、飲み屋「ボヤキ」で@koicさんに言われた言葉がぼんやりと印象に残ってる。大体だけど↓のような感じ。「hibariya は Kaminari の Contributors に入ってると思ってたけど違ったからびっくりした」そう言われたからといっていきなり Kaminari にパッチを送れるほどの行動力はないのだけど、普段から code を読み書きしている人とそうでない人の間にある、防弾ガラスみたいな、見えないけどはっきりした差を意識し始めるきっかけになった。発表は、自分の中でいい棚卸になった。</description>
<content:encoded>
<![CDATA[
    <p><a href="https://twitter.com/koic">@koic</a>先輩に「新卒向けにライブラリやツールを作ることについての話をしてよ」と言われたので二つ返事で受けさせてもらったのだった。</p><p><a href="https://speakerdeck.com/u/hibariya/p/code">自分のための code を書こう</a></p><p>永和に転職して暫く経ったある日、金曜の夜、飲み屋「ボヤキ」で<a href="https://twitter.com/koic">@koic</a>さんに言われた言葉がぼんやりと印象に残ってる。大体だけど↓のような感じ。</p><p>「hibariya は <a href="https://github.com/amatsuda/kaminari">Kaminari</a> の Contributors に入ってると思ってたけど違ったからびっくりした」</p><p>そう言われたからといっていきなり Kaminari にパッチを送れるほどの行動力はないのだけど、普段から code を読み書きしている人とそうでない人の間にある、防弾ガラスみたいな、見えないけどはっきりした差を意識し始めるきっかけになった。</p><p>発表は、自分の中でいい棚卸になった。</p>
]]>
</content:encoded>
</item>
<item rdf:about='http://hibariya.github.com/entries/20120505/a0.html'>
<title>cline-0.3.0</title>
<link>http://hibariya.github.com/entries/20120505/a0.html</link>
<dc:date>2012-05-04T15:00:00Z</dc:date>
<description>いくつか便利そうな機能をつけてアップデートしました。
簡単にURLを開く機能
フィルタリングのためのインターフェース

簡単にURLを開く表示するときにメッセージにエイリアスをつけるようにしました。
その分、あまり必要なさそうな時間の秒とタイムゾーンを表示しないようにしました。[2012/05/04 22:41][2][1f5] Delicious.com - Discover Yourself! http://delicious.com/help/quicktour/chrome
                       ↑
                      これ
エイリアスを使うと簡単にメッセージの中のURLをブラウザで開くことができます。
URLが途中で見切れてしまっても大丈夫。  $ cline open 1f5
打つのが面倒なので alias co='cline open' しておくとよさそう。フィルタリングフィルタリングのようなことを、ActiveRecordのvalidationを使って実現できるようにしておきました。
invalidなメッセージは保存されなくなります。
~/.cline/config あたりに書いておくとよさそう。require 'hiwai'

class Cline::Notification
  validate :message_should_not_be_hiwai

  def message_should_not_be_hiwai
    errors.add :message, 'hiwai' if message.hiwai?
  end
end
クラスを再オープンしているのだけど、もうちょっとスマートなAPIを用意したいなと思っているところ。
ちなみにhiwaiはレシーバがひわいかどうかを確認するためのライブラリです。</description>
<content:encoded>
<![CDATA[
    <p>いくつか便利そうな機能をつけて<a href="http://rubygems.org/gems/cline">アップデート</a>しました。</p><ul>
    <li>簡単にURLを開く機能</li>
    <li>フィルタリングのためのインターフェース</li>
    </ul>
    <h2>簡単にURLを開く</h2><p>表示するときにメッセージにエイリアスをつけるようにしました。
    その分、あまり必要なさそうな時間の秒とタイムゾーンを表示しないようにしました。</p><pre class="highlight plaintext">[2012/05/04 22:41][2][1f5] Delicious.com - Discover Yourself! http://delicious.com/help/quicktour/chrome&#x000A;                           ↑&#x000A;                          これ&#x000A;    </pre><p>エイリアスを使うと簡単にメッセージの中のURLをブラウザで開くことができます。
    URLが途中で見切れてしまっても大丈夫。</p><pre class="highlight plaintext">  $ cline open 1f5&#x000A;    </pre><p>打つのが面倒なので <code>alias co='cline open'</code> しておくとよさそう。</p><h3>フィルタリング</h3><p>フィルタリングのようなことを、ActiveRecordのvalidationを使って実現できるようにしておきました。
    invalidなメッセージは保存されなくなります。
    <code>~/.cline/config</code> あたりに書いておくとよさそう。</p><pre class="highlight ruby"><span class="nb">require</span> <span class="s1">'hiwai'</span>&#x000A;    &#x000A;    <span class="k">class</span> <span class="nc">Cline</span><span class="o">::</span><span class="no">Notification</span>&#x000A;      <span class="n">validate</span> <span class="ss">:message_should_not_be_hiwai</span>&#x000A;    &#x000A;      <span class="k">def</span> <span class="nf">message_should_not_be_hiwai</span>&#x000A;        <span class="n">errors</span><span class="p">.</span><span class="nf">add</span> <span class="ss">:message</span><span class="p">,</span> <span class="s1">'hiwai'</span> <span class="k">if</span> <span class="n">message</span><span class="p">.</span><span class="nf">hiwai?</span>&#x000A;      <span class="k">end</span>&#x000A;    <span class="k">end</span>&#x000A;    </pre><p>クラスを再オープンしているのだけど、もうちょっとスマートなAPIを用意したいなと思っているところ。
    ちなみに<a href="https://github.com/hibariya/hiwai">hiwai</a>はレシーバがひわいかどうかを確認するためのライブラリです。</p>
]]>
</content:encoded>
</item>
<item rdf:about='http://hibariya.github.com/entries/20120411/a0.html'>
<title>標準添付ライブラリもエディタで開けるreditorを作った</title>
<link>http://hibariya.github.com/entries/20120411/a0.html</link>
<dc:date>2012-04-10T15:00:00Z</dc:date>
<description>Rubyにはbundle openやgemeditのgem editみたいに、gemを自分のエディタで簡単に開くための方法があるのだけど、たまに標準添付ライブラリも開きたいことがあるのだった。
そこでreditorというgemを作ってみた。インストールするとreditorコマンドが使えるようになって、開きたいライブラリの名前を渡すと$LOAD_PATHやrubygemsの中からそれっぽいものを見つけてエディタで開いてくれる。  $ reditor csv
とか。  $ reditor faraday
とか。</description>
<content:encoded>
<![CDATA[
    <p>Rubyには<code>bundle open</code>やgemeditの<code>gem edit</code>みたいに、gemを自分のエディタで簡単に開くための方法があるのだけど、たまに標準添付ライブラリも開きたいことがあるのだった。
    そこで<a href="https://rubygems.org/gems/reditor">reditor</a>というgemを作ってみた。</p><p>インストールすると<code>reditor</code>コマンドが使えるようになって、開きたいライブラリの名前を渡すと$LOAD_PATHやrubygemsの中からそれっぽいものを見つけてエディタで開いてくれる。</p><pre class="highlight plaintext">  $ reditor csv&#x000A;    </pre><p>とか。</p><pre class="highlight plaintext">  $ reditor faraday&#x000A;    </pre><p>とか。</p>
]]>
</content:encoded>
</item>
<item rdf:about='http://hibariya.github.com/entries/20120329/a0.html'>
<title>所在の分からないWARNINGが出力されるときのこと</title>
<link>http://hibariya.github.com/entries/20120329/a0.html</link>
<dc:date>2012-03-28T15:00:00Z</dc:date>
<description>Railsを使ってるときとかにActiveSupport::MemoizableがDEPRECATEDだとかそんなWARNINGっぽいメッセージがどこからともなく出てくるときのこと。ひとまずraiseする。IOで出力する系のメソッドたちはだいたい最後にwriteを呼ぶ筈なので、writeを上書きしてる。def STDERR.write(*) raise end
Railsだとconfig/application.rbの頭あたりに書いておく。起動してstacktraceを見ればどのgemが問題かだいたい分かるのでbundle update [gem name]で問題のgemをupdateしてみると直っていたりする。
最新でも直ってなかったら自分で直してpull requestを送ったりする。</description>
<content:encoded>
<![CDATA[
    <p>Railsを使ってるときとかにActiveSupport::MemoizableがDEPRECATEDだとかそんなWARNINGっぽいメッセージがどこからともなく出てくるときのこと。</p><p>ひとまずraiseする。IOで出力する系のメソッドたちはだいたい最後にwriteを呼ぶ筈なので、writeを上書きしてる。</p><pre class="highlight ruby"><span class="k">def</span> <span class="nc">STDERR</span><span class="o">.</span><span class="nf">write</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">raise</span> <span class="k">end</span>&#x000A;    </pre><p>Railsだと<code>config/application.rb</code>の頭あたりに書いておく。</p><p>起動してstacktraceを見ればどのgemが問題かだいたい分かるので<code>bundle update [gem name]</code>で問題のgemをupdateしてみると直っていたりする。
    最新でも直ってなかったら自分で直してpull requestを送ったりする。</p>
]]>
</content:encoded>
</item>
<item rdf:about='http://hibariya.github.com/entries/20120328/a0.html'>
<title>記号がうまく入力できない</title>
<link>http://hibariya.github.com/entries/20120328/a0.html</link>
<dc:date>2012-03-27T15:00:00Z</dc:date>
<description>感覚でキーボードを使うという悪癖が抜けないので、特に苦手な記号の入力を克服するべくコンソールで練習するためのプログラムを書くことにした。kigouついでに実装は男らしい感じのコードにしようと思ったけどあまりうまくいかなくて、ただの汚いコードになった。</description>
<content:encoded>
<![CDATA[
    <p>感覚でキーボードを使うという悪癖が抜けないので、特に苦手な記号の入力を克服するべくコンソールで練習するためのプログラムを書くことにした。</p><p><a href="https://github.com/hibariya/kigou">kigou</a></p><p>ついでに実装は男らしい感じのコードにしようと思ったけどあまりうまくいかなくて、ただの汚いコードになった。</p>
]]>
</content:encoded>
</item>
</rdf:RDF>
