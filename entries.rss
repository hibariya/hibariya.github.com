<?xml version="1.0" encoding="UTF-8"?><rdf:RDF xmlns="http://purl.org/rss/1.0/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xml:lang="ja"><channel rdf:about="http://hibariya.github.com/"><title>Joy Luck Crab</title><link>http://hibariya.github.com/</link><dc:date>2012-09-23</dc:date><description>hibariya.github.com</description><items><rdf:Seq><rdf:li rdf:resource="http://hibariya.github.com/entries/20120923/a0.html"/><rdf:li rdf:resource="http://hibariya.github.com/entries/20120830/a0.html"/><rdf:li rdf:resource="http://hibariya.github.com/entries/20120731/a0.html"/><rdf:li rdf:resource="http://hibariya.github.com/entries/20120723/a0.html"/><rdf:li rdf:resource="http://hibariya.github.com/entries/20120602/a0.html"/><rdf:li rdf:resource="http://hibariya.github.com/entries/20120505/a0.html"/><rdf:li rdf:resource="http://hibariya.github.com/entries/20120411/a0.html"/><rdf:li rdf:resource="http://hibariya.github.com/entries/20120329/a0.html"/><rdf:li rdf:resource="http://hibariya.github.com/entries/20120328/a0.html"/><rdf:li rdf:resource="http://hibariya.github.com/entries/20120326/a0.html"/><rdf:li rdf:resource="http://hibariya.github.com/entries/20120324/a1.html"/><rdf:li rdf:resource="http://hibariya.github.com/entries/20120324/a0.html"/><rdf:li rdf:resource="http://hibariya.github.com/entries/20120323/a0.html"/><rdf:li rdf:resource="http://hibariya.github.com/entries/20120321/a0.html"/><rdf:li rdf:resource="http://hibariya.github.com/entries/20120317/a0.html"/><rdf:li rdf:resource="http://hibariya.github.com/entries/20120313/a0.html"/><rdf:li rdf:resource="http://hibariya.github.com/entries/20120101/a0.html"/><rdf:li rdf:resource="http://hibariya.github.com/entries/20111208/a0.html"/><rdf:li rdf:resource="http://hibariya.github.com/entries/20111204/a0.html"/><rdf:li rdf:resource="http://hibariya.github.com/entries/20111109/a0.html"/><rdf:li rdf:resource="http://hibariya.github.com/entries/20111108/a1.html"/></rdf:Seq></items></channel><item about="http://hibariya.github.com/entries/20120923/a0.html"><title>札幌RubyKaigi2012でLTしてきたこと #sprk2012</title><description>先週は SapporoRubyKaigi2012 で北海道に行ってきた。
快適な Kaigi を提供してくださった実行委員・スタッフの方々に感謝。
2日目の15日に LT 枠で、Coding for yourself というタイトルで5分間話してきた。

Ruby を使って自分や身の回りの人の生活を便利にしたいという漠然とした希望はあるけれど、漠然としているから何をすればいいかわからないし、何もで...</description><content:encoded><![CDATA[<p>先週は SapporoRubyKaigi2012 で北海道に行ってきた。
快適な Kaigi を提供してくださった実行委員・スタッフの方々に感謝。
2日目の15日に LT 枠で、<a href="https://speakerdeck.com/u/hibariya/p/coding-for-yourself">Coding for yourself</a> というタイトルで5分間話してきた。</p>
<div style="width: 500px;"><script src="http://speakerdeck.com/embed/505556424a7779000200e6b0.js"></script></div>
<p>Ruby を使って自分や身の回りの人の生活を便利にしたいという漠然とした希望はあるけれど、漠然としているから何をすればいいかわからないし、何もできなかった。
でもせめて、自分のコードで自分の望みを叶えることくらいはできるようでありたくて、まずは黙々と欲しいものをつくって公開することにした。
その結果、自分の望みを叶えることさえ難しいということが分かった。
それは確かに残念なお知らせだったけど、思わぬ収穫として、つくったものを使ってくれるひとが現れたり、新たなフィードバックが得られたりもした。
欲しいものを自分のために用意してそれを公開することは、どうやら無駄ではなさそう。</p>
<p>SapporoRubyKaigi2012 の全部のセッションを見終わってはいないので、いろいろ落ち着いたら動画を見なおしたい（10月中旬までは身内でいろいろやっているので落ち着かない）。</p>
<p>会期中は RubyKaigi2011 以前に知り合ったひとたちとまた会えたし、万葉方面とペパボ方面で今まで知り合っていなかったひとたちに挨拶できた。
それから、自給自足プログラミングという発表にとてもシンパシーを感じた。
うまく言えないけど、コードを書いてるひとに惹かれるのだと思う。</p>]]></content:encoded><dc:date>2012-09-23</dc:date><link>http://hibariya.github.com/entries/20120923/a0.html</link><author>hibariya</author></item><item about="http://hibariya.github.com/entries/20120830/a0.html"><title>map が返す Enumerator のこと</title><description>Enumerable が提供する色々なメソッドは、受け取る筈のブロックが与えられなかった場合 Enumerator オブジェクトを返す。
Enumerator オブジェクトは、each.with_index.with_objectみたいに each にブロックを渡さずに使うとかいうのにたまに使う。
あとは、外部イテレータのために使ったり、each 以外のメソッドを使って Enumerable のメ...</description><content:encoded><![CDATA[<p>Enumerable が提供する色々なメソッドは、受け取る筈のブロックが与えられなかった場合 Enumerator オブジェクトを返す。
Enumerator オブジェクトは、<code>each.with_index.with_object</code>みたいに each にブロックを渡さずに使うとかいうのにたまに使う。
あとは、外部イテレータのために使ったり、each 以外のメソッドを使って Enumerable のメソッドを使ったりするのに使える。</p>
<p>each 以外の繰り返しを行うメソッドも、ブロックを受け取らなかったときは Enumerator オブジェクトを返したりする。Enumerable#map とか。</p>
<div class="highlight">
<pre><span class="sx">%w(a b c)</span><span class="o">.</span><span class="n">map</span> <span class="c1"># =&gt; #&lt;Enumerator: ["a", "b", "c"]:map&gt;</span>
</pre>
</div>
<p>これを外部イテレータとして使う機会は今のところない。
（※元々「何に使うの」くらいに書いてたけど、<code>map.with_index</code>はやるよねというツッコミが。たしかに）</p>
<p>使う場面は無くてもせめて使い方くらいは知っておきたいなあと思って Asakusa.rb で人に聞いたりソースに書かれたコメントを読んだりしたら何となく使い方が分かってきた。</p>
<p>疑問はふたつあった。</p>
<ul>
<li>ブロックの戻り値にあたる値はどこにどうやって渡せばいいのか</li>
<li>どうすればメソッドの戻り値を得られるのか</li>
</ul>
<p>それぞれ以下のような感じ。</p>
<ul>
<li>ブロックの戻り値（つまりyieldの戻り値になる値）は Enumerator#feed に渡す</li>
<li>メソッドの戻り値は StopIteration#result から得られる</li>
</ul>
<p>もっとも、↓だけでは何だかありがたみが分からないけど。</p>
<div class="highlight">
<pre><span class="n">ary</span>  <span class="o">=</span> <span class="sx">%w(alice bob carol)</span>
<span class="n">enum</span> <span class="o">=</span> <span class="n">ary</span><span class="o">.</span><span class="n">map</span>

<span class="k">while</span> <span class="kp">true</span>
  <span class="k">begin</span>
    <span class="n">val</span> <span class="o">=</span> <span class="n">enum</span><span class="o">.</span><span class="n">next</span> <span class="c1"># ブロック引数的なもの</span>

    <span class="n">enum</span><span class="o">.</span><span class="n">feed</span> <span class="n">val</span><span class="o">.</span><span class="n">upcase</span> <span class="c1"># ブロックの戻り値的なもの</span>
  <span class="k">rescue</span> <span class="no">StopIteration</span> <span class="o">=&gt;</span> <span class="n">e</span>
    <span class="nb">p</span> <span class="n">e</span><span class="o">.</span><span class="n">result</span> <span class="c1"># ["ALICE", "BOB", "CAROL"] と表示</span>

    <span class="k">break</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre>
</div>
<p>while じゃなくて Kernel.#loop を使うと StopIteration を捕まえてループから脱出してくれたりする。</p>]]></content:encoded><dc:date>2012-08-30</dc:date><link>http://hibariya.github.com/entries/20120830/a0.html</link><author>hibariya</author></item><item about="http://hibariya.github.com/entries/20120731/a0.html"><title>簡単に Ruby のリファレンス・マニュアルを開く ruremai を色々直した</title><description>気がついたら色々な人から良い感じのパッチをもらったので取り込んで 0.0.3 をリリースしました。
Ruremai はirbなどを使っている際に、メソッドのリファレンス・マニュアルをお手軽にブラウザで開くためのツールです。
require 'ruremai' すると、Method#rurema! が追加されます。
例えば、「何かそれっぽいメソッドが記憶の片隅にあるんだけど、使い方がイマイチ思い出せ...</description><content:encoded><![CDATA[<p>気がついたら色々な人から良い感じのパッチをもらったので取り込んで <a href="https://rubygems.org/gems/ruremai">0.0.3</a> をリリースしました。</p>
<p><a href="https://github.com/hibariya/ruremai">Ruremai</a> はirbなどを使っている際に、メソッドのリファレンス・マニュアルをお手軽にブラウザで開くためのツールです。
<code>require 'ruremai'</code> すると、Method#rurema! が追加されます。</p>
<p>例えば、「何かそれっぽいメソッドが記憶の片隅にあるんだけど、使い方がイマイチ思い出せない」ようなときに便利。</p>
<div class="highlight">
<pre>hibariya@ ;-) irb
&gt;&gt; require 'ruremai'
=&gt; false
&gt;&gt; ary = %w(alice bob carol)
=&gt; ["alice", "bob", "carol"]
&gt;&gt; ary.method(:any?).rurema! # ここで唐突にブラウザが開く!
</pre>
</div>
<p>今回はいくつかの修正や機能追加があったのでした。</p>
<ul>
<li><a href="https://github.com/hibariya/ruremai/pull/1">ショートカット Object#mean? の追加</a></li>
<li><a href="https://github.com/hibariya/ruremai/pull/2">大文字を含むメソッド名に対応できていなかったバグの修正</a></li>
<li><a href="https://github.com/hibariya/ruremai/pull/4">名前空間や特定のメソッドに対応できていなかったバグの修正と高速化</a></li>
</ul>
<p>自分では気づかないようなバグへのパッチとか、あったら良さそうな機能がどんどん送られくる GitHub とっても便利。</p>]]></content:encoded><dc:date>2012-07-31</dc:date><link>http://hibariya.github.com/entries/20120731/a0.html</link><author>hibariya</author></item><item about="http://hibariya.github.com/entries/20120723/a0.html"><title>簡単に Ruby のリファレンス・マニュアルを開く ruremai をつくった</title><description>Ruby リファレンスマニュアル、通称るりまを開くのが日頃から割と面倒だったので、irb からさっと開けるようなものを作った。
ruremai
require すると Method#rurema! が追加される。これを呼び出すと、るりまの該当メソッドのページをブラウザで開く。

  Object.method(:name).rurema!


APIDock とかも見るようにできるといいのかな。
...</description><content:encoded><![CDATA[<p>Ruby リファレンスマニュアル、通称るりまを開くのが日頃から割と面倒だったので、irb からさっと開けるようなものを作った。</p>
<p><a href="https://github.com/hibariya/ruremai">ruremai</a></p>
<p>require すると Method#rurema! が追加される。これを呼び出すと、るりまの該当メソッドのページをブラウザで開く。</p>
<div class="highlight">
<pre>  <span class="no">Object</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span><span class="o">.</span><span class="n">rurema!</span>
</pre>
</div>
<p>APIDock とかも見るようにできるといいのかな。</p>
<p><code>~/.irbrc</code> あたりで <code>require 'ruremai'</code> しておくとよさそう。勉強などのお供に。</p>]]></content:encoded><dc:date>2012-07-23</dc:date><link>http://hibariya.github.com/entries/20120723/a0.html</link><author>hibariya</author></item><item about="http://hibariya.github.com/entries/20120602/a0.html"><title>社内で code についての発表をした</title><description>@koic先輩に「新卒向けにライブラリやツールを作ることについての話をしてよ」と言われたので二つ返事で受けさせてもらったのだった。
自分のための code を書こう
永和に転職して暫く経ったある日、金曜の夜、飲み屋「ボヤキ」で@koicさんに言われた言葉がぼんやりと印象に残ってる。大体だけど↓のような感じ。
「hibariya は Kaminari の Contributors に入ってると思って...</description><content:encoded><![CDATA[<p><a href="https://twitter.com/koic">@koic</a>先輩に「新卒向けにライブラリやツールを作ることについての話をしてよ」と言われたので二つ返事で受けさせてもらったのだった。</p>
<p><a href="https://speakerdeck.com/u/hibariya/p/code">自分のための code を書こう</a></p>
<p>永和に転職して暫く経ったある日、金曜の夜、飲み屋「ボヤキ」で<a href="https://twitter.com/koic">@koic</a>さんに言われた言葉がぼんやりと印象に残ってる。大体だけど↓のような感じ。</p>
<p>「hibariya は <a href="https://github.com/amatsuda/kaminari">Kaminari</a> の Contributors に入ってると思ってたけど違ったからびっくりした」</p>
<p>そう言われたからといっていきなり Kaminari にパッチを送れるほどの行動力はないのだけど、普段から code を読み書きしている人とそうでない人の間にある、防弾ガラスみたいな、見えないけどはっきりした差を意識し始めるきっかけになった。</p>
<p>発表は、自分の中でいい棚卸になった。</p>]]></content:encoded><dc:date>2012-06-02</dc:date><link>http://hibariya.github.com/entries/20120602/a0.html</link><author>hibariya</author></item><item about="http://hibariya.github.com/entries/20120505/a0.html"><title>cline-0.3.0</title><description>いくつか便利そうな機能をつけてアップデートしました。

簡単にURLを開く機能
フィルタリングのためのインターフェース

簡単にURLを開く
表示するときにメッセージにエイリアスをつけるようにしました。
その分、あまり必要なさそうな時間の秒とタイムゾーンを表示しないようにしました。

[2012/05/04 22:41][2][1f5] Delicious.com - Discover Yours...</description><content:encoded><![CDATA[<p>いくつか便利そうな機能をつけて<a href="http://rubygems.org/gems/cline">アップデート</a>しました。</p>
<ul>
<li>簡単にURLを開く機能</li>
<li>フィルタリングのためのインターフェース</li>
</ul>
<h2>簡単にURLを開く</h2>
<p>表示するときにメッセージにエイリアスをつけるようにしました。
その分、あまり必要なさそうな時間の秒とタイムゾーンを表示しないようにしました。</p>
<div class="highlight">
<pre>[2012/05/04 22:41][2][1f5] Delicious.com - Discover Yourself! http://delicious.com/help/quicktour/chrome
                       ↑
                      これ
</pre>
</div>
<p>エイリアスを使うと簡単にメッセージの中のURLをブラウザで開くことができます。
URLが途中で見切れてしまっても大丈夫。</p>
<div class="highlight">
<pre>  $ cline open 1f5
</pre>
</div>
<p>打つのが面倒なので <code>alias co='cline open'</code> しておくとよさそう。</p>
<h3>フィルタリング</h3>
<p>フィルタリングのようなことを、ActiveRecordのvalidationを使って実現できるようにしておきました。
invalidなメッセージは保存されなくなります。
<code>~/.cline/config</code> あたりに書いておくとよさそう。</p>
<div class="highlight">
<pre><span class="nb">require</span> <span class="s1">'hiwai'</span>

<span class="k">class</span> <span class="nc">Cline</span><span class="o">::</span><span class="no">Notification</span>
  <span class="n">validate</span> <span class="ss">:message_should_not_be_hiwai</span>

  <span class="k">def</span> <span class="nf">message_should_not_be_hiwai</span>
    <span class="n">errors</span><span class="o">.</span><span class="n">add</span> <span class="ss">:message</span><span class="p">,</span> <span class="s1">'hiwai'</span> <span class="k">if</span> <span class="n">message</span><span class="o">.</span><span class="n">hiwai?</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre>
</div>
<p>クラスを再オープンしているのだけど、もうちょっとスマートなAPIを用意したいなと思っているところ。
ちなみに<a href="https://github.com/hibariya/hiwai">hiwai</a>はレシーバがひわいかどうかを確認するためのライブラリです。</p>]]></content:encoded><dc:date>2012-05-05</dc:date><link>http://hibariya.github.com/entries/20120505/a0.html</link><author>hibariya</author></item><item about="http://hibariya.github.com/entries/20120411/a0.html"><title>標準添付ライブラリもエディタで開けるreditorを作った</title><description>Rubyにはbundle openやgemeditのgem editみたいに、gemを自分のエディタで簡単に開くための方法があるのだけど、たまに標準添付ライブラリも開きたいことがあるのだった。
そこでreditorというgemを作ってみた。
インストールするとreditorコマンドが使えるようになって、開きたいライブラリの名前を渡すと$LOAD_PATHやrubygemsの中からそれっぽいものを見...</description><content:encoded><![CDATA[<p>Rubyには<code>bundle open</code>やgemeditの<code>gem edit</code>みたいに、gemを自分のエディタで簡単に開くための方法があるのだけど、たまに標準添付ライブラリも開きたいことがあるのだった。
そこで<a href="https://rubygems.org/gems/reditor">reditor</a>というgemを作ってみた。</p>
<p>インストールすると<code>reditor</code>コマンドが使えるようになって、開きたいライブラリの名前を渡すと$LOAD_PATHやrubygemsの中からそれっぽいものを見つけてエディタで開いてくれる。</p>
<div class="highlight">
<pre>  $ reditor csv
</pre>
</div>
<p>とか。</p>
<div class="highlight">
<pre>  $ reditor faraday
</pre>
</div>
<p>とか。</p>]]></content:encoded><dc:date>2012-04-11</dc:date><link>http://hibariya.github.com/entries/20120411/a0.html</link><author>hibariya</author></item><item about="http://hibariya.github.com/entries/20120329/a0.html"><title>所在の分からないWARNINGが出力されるときのこと</title><description>Railsを使ってるときとかにActiveSupport::MemoizableがDEPRECATEDだとかそんなWARNINGっぽいメッセージがどこからともなく出てくるときのこと。
ひとまずraiseする。IOで出力する系のメソッドたちはだいたい最後にwriteを呼ぶ筈なので、writeを上書きしてる。

def STDERR.write(*) raise end


Railsだとconfig...</description><content:encoded><![CDATA[<p>Railsを使ってるときとかにActiveSupport::MemoizableがDEPRECATEDだとかそんなWARNINGっぽいメッセージがどこからともなく出てくるときのこと。</p>
<p>ひとまずraiseする。IOで出力する系のメソッドたちはだいたい最後にwriteを呼ぶ筈なので、writeを上書きしてる。</p>
<div class="highlight">
<pre><span class="k">def</span> <span class="nc">STDERR</span><span class="o">.</span><span class="nf">write</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">raise</span> <span class="k">end</span>
</pre>
</div>
<p>Railsだと<code>config/application.rb</code>の頭あたりに書いておく。</p>
<p>起動してstacktraceを見ればどのgemが問題かだいたい分かるので<code>bundle update [gem name]</code>で問題のgemをupdateしてみると直っていたりする。
最新でも直ってなかったら自分で直してpull requestを送ったりする。</p>]]></content:encoded><dc:date>2012-03-29</dc:date><link>http://hibariya.github.com/entries/20120329/a0.html</link><author>hibariya</author></item><item about="http://hibariya.github.com/entries/20120328/a0.html"><title>記号がうまく入力できない</title><description>感覚でキーボードを使うという悪癖が抜けないので、特に苦手な記号の入力を克服するべくコンソールで練習するためのプログラムを書くことにした。
kigou
ついでに実装は男らしい感じのコードにしようと思ったけどあまりうまくいかなくて、ただの汚いコードになった。</description><content:encoded><![CDATA[<p>感覚でキーボードを使うという悪癖が抜けないので、特に苦手な記号の入力を克服するべくコンソールで練習するためのプログラムを書くことにした。</p>
<p><a href="https://github.com/hibariya/kigou">kigou</a></p>
<p>ついでに実装は男らしい感じのコードにしようと思ったけどあまりうまくいかなくて、ただの汚いコードになった。</p>]]></content:encoded><dc:date>2012-03-28</dc:date><link>http://hibariya.github.com/entries/20120328/a0.html</link><author>hibariya</author></item><item about="http://hibariya.github.com/entries/20120326/a0.html"><title>プロセスをforkするときのこと</title><description>孤児プロセスとゾンビプロセスの違いがうまく理解できてなかったけど、ようやく違いを確認することができた。
孤児プロセス
孤児プロセスは、親プロセスがwaitせずに先に逝ってしまった後も走り続けている子プロセス。
Orphan Process とも呼ばれる。
親のいなくなった子プロセスはinitプロセスの子（孤児）になる。
親プロセスが死んで、子プロセスの親が変化する様子を見るには以下のようなスクリプ...</description><content:encoded><![CDATA[<p>孤児プロセスとゾンビプロセスの違いがうまく理解できてなかったけど、ようやく違いを確認することができた。</p>
<h2>孤児プロセス</h2>
<p>孤児プロセスは、親プロセスがwaitせずに先に逝ってしまった後も走り続けている子プロセス。
Orphan Process とも呼ばれる。
親のいなくなった子プロセスはinitプロセスの子（孤児）になる。</p>
<p>親プロセスが死んで、子プロセスの親が変化する様子を見るには以下のようなスクリプトを実行したあとでファイルをtailすると分かりやすそう。</p>
<div class="highlight">
<pre><span class="no">Process</span><span class="o">.</span><span class="n">fork</span> <span class="k">do</span>
  <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">'orphan'</span><span class="p">,</span> <span class="s1">'a'</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
    <span class="kp">loop</span> <span class="k">do</span>
      <span class="nb">sleep</span> <span class="mi">1</span>

      <span class="c1"># 親プロセスのpidをファイルに書き出す</span>
      <span class="n">f</span><span class="o">.</span><span class="n">puts</span> <span class="no">Process</span><span class="o">.</span><span class="n">ppid</span>
      <span class="n">f</span><span class="o">.</span><span class="n">flush</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="nb">sleep</span> <span class="mi">5</span>
</pre>
</div>
<p>このプログラムを実行して、<code>orphan</code>を<code>tail -f</code>で観察していると、5秒後に親プロセスが死んで、子プロセスの親プロセスがinitに変化していることを確認できる。</p>
<div class="highlight">
<pre>$ tailf orphan
80361 # まだ親プロセスの子
80361
80361
80361
80361
1     # ここでinitの養子になってる
1
1
1
</pre>
</div>
<p>initは孤児プロセスをwaitしてくれる。</p>
<h2>ゾンビプロセス</h2>
<p>ゾンビプロセスは、既に処理を終えて死んだ子プロセスが、まだ生きている親プロセスにwaitされるのを待っている状態のこと。</p>
<p>子プロセスが死んでも親プロセスが生きている限り、いつ子プロセスの終了ステータスが参照されても（waitされても）いいように、その情報はプロセステーブルのエントリとして残る。
プロセスとしては死んでいるけれど、waitされるかもしれないのでプロセステーブルに残っている状態がゾンビ。</p>
<div class="highlight">
<pre><span class="nb">puts</span> <span class="no">Process</span><span class="o">.</span><span class="n">fork</span> <span class="p">{</span> <span class="nb">sleep</span> <span class="mi">1</span> <span class="p">}</span>

<span class="nb">sleep</span> <span class="mi">10</span>
</pre>
</div>
<p>上のプログラムを実行して、表示されたpidを元に、別の端末でプロセスの状態を確認すると、ゾンビ状態になっていることがわかる（10秒後には親プロセスが死ぬのでゾンビも消える）。</p>
<div class="highlight">
<pre>$ ps -ho pid,state 81793
  PID STAT
  82077 Z+
</pre>
</div>
<p>ゾンビプロセスの発生を防ぐには、親プロセスで確実にwaitする必要がある。
RubyならProcess.waitpidを使うといい。
waitすると子プロセスが終了するまで親プロセスの処理がブロックされる。</p>
<div class="highlight">
<pre><span class="n">pid</span> <span class="o">=</span> <span class="no">Process</span><span class="o">.</span><span class="n">fork</span> <span class="p">{</span> <span class="nb">sleep</span> <span class="mi">1</span> <span class="p">}</span>

<span class="no">Process</span><span class="o">.</span><span class="n">waitpid</span> <span class="n">pid</span>
</pre>
</div>
<p>もしくは、Double Forkを行うと親プロセスで待たなくてもよくなる。
生成した子プロセスに孫プロセスを生成させ、さらに子プロセスは即座に終了させることで、孫プロセスがinitの子プロセス（孤児プロセス）となってwaitはinitに任せることができるようになる。</p>
<div class="highlight">
<pre><span class="n">pid</span> <span class="o">=</span> <span class="no">Process</span><span class="o">.</span><span class="n">fork</span> <span class="p">{</span>
  <span class="nb">puts</span> <span class="no">Process</span><span class="o">.</span><span class="n">fork</span> <span class="p">{</span>
    <span class="nb">sleep</span> <span class="mi">20</span> <span class="c1"># 何かしらの処理</span>
  <span class="p">}</span>

  <span class="nb">sleep</span> <span class="mi">1</span>
<span class="p">}</span>

<span class="no">Process</span><span class="o">.</span><span class="n">waitpid</span> <span class="n">pid</span>
</pre>
</div>
<h2>まとめ</h2>
<ul>
<li>親が死んだら子はinitが看取ってくれる</li>
<li>親が死ぬまでゾンビは消えない</li>
<li>ゾンビを増やさないためには、適宜waitするかDouble Forkしてinitに面倒をみてもらう</li>
</ul>]]></content:encoded><dc:date>2012-03-26</dc:date><link>http://hibariya.github.com/entries/20120326/a0.html</link><author>hibariya</author></item><item about="http://hibariya.github.com/entries/20120324/a1.html"><title>Retter 0.2.1</title><description>間を開けずにもう少し変更しました。
複数のテンプレートエンジンへの対応
Tiltを使うことで複数のテンプレートエンジンに対応できるようになりました。
ERBとかが使えるようになります。
固定ページの生成抑止
以下のページは、使い方によっては必ずしも必要のないページなので、設定すれば生成されないようになりました。

profile.html
entries.html
feed.rss

ページの生成...</description><content:encoded><![CDATA[<p><a href="https://rubygems.org/gems/retter">間を開けずにもう少し変更しました。</a></p>
<h2>複数のテンプレートエンジンへの対応</h2>
<p><a href="https://github.com/rtomayko/tilt">Tilt</a>を使うことで複数のテンプレートエンジンに対応できるようになりました。
ERBとかが使えるようになります。</p>
<h2>固定ページの生成抑止</h2>
<p>以下のページは、使い方によっては必ずしも必要のないページなので、設定すれば生成されないようになりました。</p>
<ul>
<li>profile.html</li>
<li>entries.html</li>
<li>feed.rss</li>
</ul>
<p>ページの生成を抑止する例です。Retterfileに追記します。</p>
<div class="highlight">
<pre><span class="c1"># prfile, entries, feed すべてを生成しない</span>
<span class="n">allow_binding</span> <span class="ss">:none</span>

<span class="c1"># entries, feedは生成する</span>
<span class="n">allow_binding</span> <span class="o">[</span><span class="ss">:entries</span><span class="p">,</span> <span class="ss">:feed</span><span class="o">]</span>
</pre>
</div>
<h2>日付指定の方法</h2>
<p><a href="https://github.com/mojombo/chronic">Chronic</a>を使うようになったので、今までより多くの方法で日付の指定ができるようになりました。
<code>retter edit this\ wednesday</code>とか指定できます。</p>]]></content:encoded><dc:date>2012-03-24</dc:date><link>http://hibariya.github.com/entries/20120324/a1.html</link><author>hibariya</author></item><item about="http://hibariya.github.com/entries/20120324/a0.html"><title>Retter 0.2.2</title><description>built-inなテーマにサイドバーをつけました。
</description><content:encoded><![CDATA[<p><a href="https://rubygems.org/gems/retter">built-inなテーマにサイドバーをつけました。</a></p>
]]></content:encoded><dc:date>2012-03-24</dc:date><link>http://hibariya.github.com/entries/20120324/a0.html</link><author>hibariya</author></item><item about="http://hibariya.github.com/entries/20120323/a0.html"><title>Retter 0.2.0</title><description>Retterをアップデートしました。
Pygmentsを利用できるようになりました。
利用するにはRetterfileに以下の設定を追加します。

renderer Retter::Renderers::PygmentsRenderer


今度からretter newするとデフォルトでPygmentsを使用するようになって、そのためのCSSも生成するようになりました。
現状の日記にCSSを追加す...</description><content:encoded><![CDATA[<p><a href="https://rubygems.org/gems/retter">Retter</a>をアップデートしました。</p>
<p>Pygmentsを利用できるようになりました。
利用するにはRetterfileに以下の設定を追加します。</p>
<div class="highlight">
<pre><span class="n">renderer</span> <span class="no">Retter</span><span class="o">::</span><span class="no">Renderers</span><span class="o">::</span><span class="no">PygmentsRenderer</span>
</pre>
</div>
<p>今度から<code>retter new</code>するとデフォルトでPygmentsを使用するようになって、そのためのCSSも生成するようになりました。</p>
<p>現状の日記にCSSを追加するには、<a href="https://raw.github.com/hibariya/retter/master/lib/retter/generator/skel/stylesheets/pygments.css">ここ</a>から直接ダウンロードするとすぐに使えるかと思います。</p>
<p>実は、上記の<code>renderer</code>にはRedcarpet::Render::HTMLを継承したクラスであれば何でも指定できます。
Pygmentsを使いたいけどPygments.rbが落ちて困るという場合はAlbinoを使うrendererを作るといいかもしれません。
以下はRedcarpetのREADMEから抜粋したもの。</p>
<div class="highlight">
<pre><span class="k">class</span> <span class="nc">HTMLwithAlbino</span> <span class="o">&lt;</span> <span class="no">Redcarpet</span><span class="o">::</span><span class="no">Render</span><span class="o">::</span><span class="no">HTML</span>
  <span class="k">def</span> <span class="nf">block_code</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">language</span><span class="p">)</span>
    <span class="no">Albino</span><span class="o">.</span><span class="n">safe_colorize</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">language</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre>
</div>
<p>それから、Markdownのレンダリング結果をキャッシュするようになりました。
途中でrendererを変更したりして、レンダリング結果が変わるような場合は以下のように<code>tmp/cache</code>以下のキャッシュを一度削除してください。</p>
<div class="highlight">
<pre>rm -rf tmp/cache/*
</pre>
</div>]]></content:encoded><dc:date>2012-03-23</dc:date><link>http://hibariya.github.com/entries/20120323/a0.html</link><author>hibariya</author></item><item about="http://hibariya.github.com/entries/20120321/a0.html"><title>Rubyで日付っぽい文字列を日時や日付に変換するときのこと</title><description>　Chronicべんり。別に最近のものでもないのだけど、しらなかった。
　それまではActiveSupportで頑張っていた。

require 'active_support/core_ext/object'
require 'date'

def parse_date_str(date_str)
  case date_str
  when /^yesterday$/i then 1.day....</description><content:encoded><![CDATA[<p>　<a href="https://github.com/mojombo/chronic">Chronic</a>べんり。別に最近のものでもないのだけど、しらなかった。</p>
<p>　それまではActiveSupportで頑張っていた。</p>
<div class="highlight">
<pre><span class="nb">require</span> <span class="s1">'active_support/core_ext/object'</span>
<span class="nb">require</span> <span class="s1">'date'</span>

<span class="k">def</span> <span class="nf">parse_date_str</span><span class="p">(</span><span class="n">date_str</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">date_str</span>
  <span class="k">when</span> <span class="sr">/^yesterday$/i</span> <span class="k">then</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="o">.</span><span class="n">ago</span>
  <span class="k">when</span> <span class="sr">/^today$/i</span>     <span class="k">then</span> <span class="mi">0</span><span class="o">.</span><span class="n">day</span><span class="o">.</span><span class="n">ago</span>
  <span class="k">when</span> <span class="sr">/^tomorrow$/i</span>  <span class="k">then</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="o">.</span><span class="n">since</span>
  <span class="k">when</span> <span class="sr">/^[0-9]+[\.\s](?:days?|weeks?|months?|years?)[\.\s](?:ago|since)$/i</span>
    <span class="nb">eval</span><span class="p">(</span><span class="n">date_str</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\s+/</span><span class="p">,</span> <span class="s1">'.'</span><span class="p">))</span>
  <span class="k">else</span>
    <span class="no">Date</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">date_str</span><span class="p">)</span>
  <span class="k">end</span><span class="o">.</span><span class="n">to_date</span>
<span class="k">end</span>

<span class="n">parse_date_str</span> <span class="s1">'20110101'</span>   <span class="c1"># =&gt; Sat, 01 Jan 2011</span>
<span class="n">parse_date_str</span> <span class="s1">'yesterday'</span>  <span class="c1"># =&gt; Tue, 20 Mar 2012</span>
<span class="n">parse_date_str</span> <span class="s1">'1 week ago'</span> <span class="c1"># =&gt; Wed, 14 Mar 2012</span>
</pre>
</div>
<p>　こんなコード書かなくてもよかったんだ！</p>
<div class="highlight">
<pre><span class="nb">require</span> <span class="s1">'date'</span>
<span class="nb">require</span> <span class="s1">'chronic'</span>

<span class="k">def</span> <span class="nf">parse_date_str</span><span class="p">(</span><span class="n">date_str</span><span class="p">)</span>
  <span class="p">(</span><span class="no">Chronic</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">date_str</span><span class="p">)</span> <span class="o">||</span> <span class="no">Date</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">date_str</span><span class="p">))</span><span class="o">.</span><span class="n">to_date</span>
<span class="k">end</span>

<span class="n">parse_date_str</span> <span class="s1">'20110101'</span>   <span class="c1"># =&gt; #&lt;Date: 2011-01-01 ((2455563j,0s,0n),+0s,2299161j)&gt;</span>
<span class="n">parse_date_str</span> <span class="s1">'yesterday'</span>  <span class="c1"># =&gt; #&lt;Date: 2012-03-20 ((2456007j,0s,0n),+0s,2299161j)&gt;</span>
<span class="n">parse_date_str</span> <span class="s1">'1 week ago'</span> <span class="c1"># =&gt; #&lt;Date: 2012-03-14 ((2456001j,0s,0n),+0s,2299161j)&gt;</span>
</pre>
</div>
<p>　Chronicはparseできなかったときはnilを返す。
Date.parseを残しているのは、YYYYMMDDみたいな形式も使いたかったからで、それを除けばだいたいChronicだけで充分だった。</p>
<p>　戻り値の見た目（Date#inspect）が違うのはActiveSupportの拡張っぽい。</p>]]></content:encoded><dc:date>2012-03-21</dc:date><link>http://hibariya.github.com/entries/20120321/a0.html</link><author>hibariya</author></item><item about="http://hibariya.github.com/entries/20120317/a0.html"><title>Rubyでコードブロックに色を付けるときのこと</title><description>覚え書き。
retterで使っているSyntax HighlighterはCodeRayというやつだったけど、吐かれるHTMLがあまり綺麗ではない（style属性付きのdivとかが大量に吐かれる）のと、色合いのカスタマイズも難しいので他のもの（具体的にはPygments）を使うことにした。
pygmentsはコード辺にcssのclassをつけてくれるのでこんなスタイルシートを用意して使う。スタイル...</description><content:encoded><![CDATA[<p>覚え書き。</p>
<p><a href="https://github.com/hibariya/retter">retter</a>で使っているSyntax HighlighterはCodeRayというやつだったけど、吐かれるHTMLがあまり綺麗ではない（style属性付きのdivとかが大量に吐かれる）のと、色合いのカスタマイズも難しいので他のもの（具体的にはPygments）を使うことにした。
pygmentsはコード辺にcssのclassをつけてくれるので<a href="http://pygments.org/media/pygments_style.css">こんな</a>スタイルシートを用意して使う。スタイルシートを弄れば色分けを好きに変えられる。</p>
<p>RubyからPygmentsを使うには知っている限りだと2つの方法があって、ひとつは<a href="https://github.com/github/albino">Albino</a>、もうひとつは<a href="https://github.com/tmm1/pygments.rb">pygments.rb</a>を使う。</p>
<p>Albinoはdeprecatedらしくて、READMEにはpygments.rbへのリンクまで書いてある。
最後にコミットされたのは4ヶ月前だし、今後Albinoはメンテされないらしい。</p>
<h2>pygments.rb</h2>
<p>FFIを使っているのでとても早い。
だからこれを使えばいいんだけど、試しに使っていたらときどきSegmentation faultになる（しかもいつ発生するのかよくわからない）。
いきなりセグフォとか困る人にはまだおすすめできない気がする。</p>
<h2>Albino</h2>
<p>albinoを動かすには、pygmentizeという別のgemも必要。</p>
<p>deprecatedだけどセグフォはしなかった。ただしとっても遅い。
どんなに小さなコードブロックだとしても、色付けするのに毎回1プロセス起動する。
何十個もある場合は何十秒も待たされることになる。</p>
<p>何らかの方法でキャッシュするようにして、いちど生成したコードは使いまわせるようにすると少しマシ。
根本的な解決にはならないけど、用途によっては有効かも。</p>
<p>もうひとつ、AlbinoにはAlbino::Multiっていうクラスがついていて、説明を読んでみるとどうやら1プロセスで複数のコードブロックを一気にやっつけられるらしい。
これさえあればプロセス起動のオーバーヘッドが大幅に削減できそう。
ただし動かなかった。
Albino::Multiは裏でmultipygmentizeというpythonスクリプトを叩いてるのだけど、このpythonスクリプトが必要としているpygmentsモジュールは別のgemであるpygmentizeの方に入っていて、読み込みに失敗しているようだった。
pythonの環境をちゃんと整えれば動くのかな。</p>
<h2>結論</h2>
<p>これをこう使えば安心、というのは見つけられなかった。</p>]]></content:encoded><dc:date>2012-03-17</dc:date><link>http://hibariya.github.com/entries/20120317/a0.html</link><author>hibariya</author></item><item about="http://hibariya.github.com/entries/20120313/a0.html"><title>FiberとSemi-Coroutine</title><description>やっと使い方を覚えたFiberについての覚書。組込みライブラリ編。
Fiber
Rubyの組込みライブラリとして提供されているFiber。
ノンプリエンプティブな軽量スレッド。

生成したファイバは勝手には走らない
コンテキストの切り替えは自分で
親から子へ、子から親へ切り替えることができる
IO待ちでも切り替わらない

コンテキストの切り替えはFiber#resumeとFiber.yieldで行...</description><content:encoded><![CDATA[<p>やっと使い方を覚えたFiberについての覚書。組込みライブラリ編。</p>
<h2>Fiber</h2>
<p>Rubyの組込みライブラリとして提供されているFiber。
ノンプリエンプティブな軽量スレッド。</p>
<ul>
<li>生成したファイバは勝手には走らない</li>
<li>コンテキストの切り替えは自分で</li>
<li>親から子へ、子から親へ切り替えることができる</li>
<li>IO待ちでも切り替わらない</li>
</ul>
<p>コンテキストの切り替えは<code>Fiber#resume</code>と<code>Fiber.yield</code>で行う。</p>
<div class="highlight">
<pre><span class="n">fiber</span> <span class="o">=</span> <span class="no">Fiber</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span>
  <span class="nb">puts</span> <span class="s1">'Hello Alice.'</span>

  <span class="no">Fiber</span><span class="o">.</span><span class="n">yield</span>

  <span class="nb">puts</span> <span class="s1">'Hello Bob.'</span>

  <span class="no">Fiber</span><span class="o">.</span><span class="n">yield</span>

  <span class="nb">puts</span> <span class="s1">'Hello Carol.'</span>
<span class="p">}</span>

<span class="n">fiber</span><span class="o">.</span><span class="n">resume</span> <span class="c1"># "Hello Alice." と表示</span>
<span class="n">fiber</span><span class="o">.</span><span class="n">resume</span> <span class="c1"># "Hello Bob." と表示</span>
<span class="n">fiber</span><span class="o">.</span><span class="n">resume</span> <span class="c1"># "Hello Carol." と表示</span>
</pre>
</div>
<p>上の例ではトップレベルが親。ブロックの中が子。親と子でキャッチボールしてる感じ。
<code>Fiber#resume</code>で親から子へコンテキストを切り替え、<code>Fiber.yield</code>で子から親へ切り替える。</p>
<p>組込みライブラリとしてのFiberは、親から子、子から親へのみ切り替えられる（それ以外のコンテキストに切り替えることはできない）。</p>
<h2>Fiberの引数と戻り値</h2>
<h3>親からみたときの引数と戻り値</h3>
<p>引数は常に<code>Fiber#resume</code>に渡す。
戻り値は<code>Fiber#resume</code>の戻り値。</p>
<h3>子からみたときの引数と戻り値</h3>
<p>最初の引数はブロック引数として渡される。
それ以降の引数は<code>Fiber.yield</code>の戻り値として与えられる。</p>
<p>戻り値は<code>Fiber.yield</code>の引数として渡す。
<code>Fiber.new</code>で渡したブロックが終了したときは、最後に評価された式の値が戻り値として返る。</p>
<div class="highlight">
<pre><span class="n">greet3</span> <span class="o">=</span> <span class="no">Fiber</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span><span class="o">|</span><span class="nb">name</span><span class="o">|</span>
  <span class="mi">3</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
    <span class="nb">name</span> <span class="o">=</span> <span class="no">Fiber</span><span class="o">.</span><span class="n">yield</span><span class="p">(</span><span class="s2">"Hi </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="s1">'Good night'</span>
<span class="p">}</span>

<span class="n">greet3</span><span class="o">.</span><span class="n">resume</span><span class="p">(</span><span class="s1">'Aron'</span><span class="p">)</span>  <span class="c1"># =&gt; "Hi Aron"</span>
<span class="n">greet3</span><span class="o">.</span><span class="n">resume</span><span class="p">(</span><span class="s1">'Billy'</span><span class="p">)</span> <span class="c1"># =&gt; "Hi Billy"</span>
<span class="n">greet3</span><span class="o">.</span><span class="n">resume</span><span class="p">(</span><span class="s1">'Colon'</span><span class="p">)</span> <span class="c1"># =&gt; "Hi Colon"</span>
<span class="n">greet3</span><span class="o">.</span><span class="n">resume</span>          <span class="c1"># =&gt; "Good night"</span>
</pre>
</div>
<h2>Coroutine</h2>
<ul>
<li>途中まで計算して、一旦値を返して、その後また続きから実行できる仕組み</li>
<li>親と子（callerとcallee）という関係があるものをsemi-coroutineと呼ぶ</li>
<li>組込みライブラリのFiberはsemi-coroutineの実装と言ってよいのかな</li>
</ul>
<h2>semi-coroutineさん何に使うの</h2>
<p>ジェネレータや外部イテレータに使うらしい。
無限リストにも使うらしい。
外部イテレータとしてときどき使うかもしれないEnumeratorではFiberを使ってるようだ。</p>
<p>永遠に終わらない数字のカウントアップを行うジェネレータ。</p>
<div class="highlight">
<pre><span class="n">endless</span> <span class="o">=</span> <span class="no">Fiber</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span>
  <span class="kp">loop</span><span class="o">.</span><span class="n">with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">_</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span>
    <span class="no">Fiber</span><span class="o">.</span><span class="n">yield</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
  <span class="k">end</span>
<span class="p">}</span>

<span class="n">endless</span><span class="o">.</span><span class="n">resume</span> <span class="c1"># =&gt; 0</span>
<span class="n">endless</span><span class="o">.</span><span class="n">resume</span> <span class="c1"># =&gt; 1</span>
<span class="n">endless</span><span class="o">.</span><span class="n">resume</span> <span class="c1"># =&gt; 2</span>
<span class="n">endless</span><span class="o">.</span><span class="n">resume</span> <span class="c1"># =&gt; 3</span>
<span class="n">endless</span><span class="o">.</span><span class="n">resume</span> <span class="c1"># =&gt; 4</span>
<span class="n">endless</span><span class="o">.</span><span class="n">resume</span> <span class="c1"># =&gt; 5</span>
<span class="n">endless</span><span class="o">.</span><span class="n">resume</span> <span class="c1"># =&gt; 6</span>
<span class="c1"># endless...</span>
</pre>
</div>
<p>FiberのAPIを隠して外部イテレータっぽく使ってみる。</p>
<div class="highlight">
<pre><span class="k">class</span> <span class="nc">EndlessNumber</span>
  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="n">rewind</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">rewind</span>
    <span class="vi">@generator</span> <span class="o">=</span> <span class="no">Fiber</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span>
      <span class="kp">loop</span><span class="o">.</span><span class="n">with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">_</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span>
        <span class="no">Fiber</span><span class="o">.</span><span class="n">yield</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="p">}</span>

    <span class="nb">self</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">next</span>
    <span class="vi">@generator</span><span class="o">.</span><span class="n">resume</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">en</span> <span class="o">=</span> <span class="no">EndlessNumber</span><span class="o">.</span><span class="n">new</span>

<span class="n">en</span><span class="o">.</span><span class="n">next</span> <span class="c1"># =&gt; 0</span>
<span class="n">en</span><span class="o">.</span><span class="n">next</span> <span class="c1"># =&gt; 1</span>
<span class="n">en</span><span class="o">.</span><span class="n">next</span> <span class="c1"># =&gt; 2</span>
<span class="n">en</span><span class="o">.</span><span class="n">rewind</span>
<span class="n">en</span><span class="o">.</span><span class="n">next</span> <span class="c1"># =&gt; 0</span>

<span class="k">while</span> <span class="n">num</span> <span class="o">=</span> <span class="n">en</span><span class="o">.</span><span class="n">next</span>
  <span class="nb">puts</span> <span class="n">num</span>
<span class="k">end</span> <span class="c1"># ウワーッ</span>
</pre>
</div>
<p>　これに使おう、というのがとっさに思い浮かばない。</p>]]></content:encoded><dc:date>2012-03-13</dc:date><link>http://hibariya.github.com/entries/20120313/a0.html</link><author>hibariya</author></item><item about="http://hibariya.github.com/entries/20120101/a0.html"><title>年も明けたのでClojureを勉強し始めた</title><description>結局さわりはじめたのはClojure。
手始めにオーム社eStore(β)でプログラミングClojureを買ったよ。</description><content:encoded><![CDATA[<p>結局さわりはじめたのはClojure。</p>
<p>手始めに<a href="http://estore.ohmsha.co.jp/">オーム社eStore(β)</a>で<a href="http://estore.ohmsha.co.jp/titles/978427406789P">プログラミングClojure</a>を買ったよ。</p>]]></content:encoded><dc:date>2012-01-01</dc:date><link>http://hibariya.github.com/entries/20120101/a0.html</link><author>hibariya</author></item><item about="http://hibariya.github.com/entries/20111208/a0.html"><title>7つの言語 7つの世界 を読み終わった</title><description>今日はちょっと体調を崩していたので全休、内職もほったらかしにしつつ。
課題とかはこなしてないけど、ひと通り理解しようと努めながら読んで最後まで行った。
関数型言語のエッセンスに触れたり並列処理の色々なやりかたを知るきっかけをつくるのに役だったと思う。
実際にやってみようかなと思った言語は上から順に、

Haskell
Clojure
Erlang
Prolog

かなあ。
Prologが一番下にき...</description><content:encoded><![CDATA[<p>今日はちょっと体調を崩していたので全休、内職もほったらかしにしつつ。
課題とかはこなしてないけど、ひと通り理解しようと努めながら読んで最後まで行った。</p>
<p>関数型言語のエッセンスに触れたり並列処理の色々なやりかたを知るきっかけをつくるのに役だったと思う。
実際にやってみようかなと思った言語は上から順に、</p>
<ul>
<li>Haskell</li>
<li>Clojure</li>
<li>Erlang</li>
<li>Prolog</li>
</ul>
<p>かなあ。
Prologが一番下にきたのは単に古めだからという理由なんですが、Prologの章はたいへん刺激的だった。
Ioはかわいい。Scalaは書き方が難しいなあと思った。</p>]]></content:encoded><dc:date>2011-12-08</dc:date><link>http://hibariya.github.com/entries/20111208/a0.html</link><author>hibariya</author></item><item about="http://hibariya.github.com/entries/20111204/a0.html"><title>忙しくてフィードが読めないのでClineという通知用のツールを作った</title><description>たまに時間があるとフィードを読む習慣を復活させようとするんですが、結局は途中で仕事が忙しくなって放置してしまい数日後「全部読んだことにする」ボタンをクリックする繰り返しに疲れた。
もうフィードアグリゲータで定期的に情報を集めるのは無理なんだなと最近は諦め始めていて、かといって最近の出来事がわからなくなるのはちょっと。。
別に全部に目を通さなくていいから最近の情報は常に目の届くところで渦巻いていてほ...</description><content:encoded><![CDATA[<p>たまに時間があるとフィードを読む習慣を復活させようとするんですが、結局は途中で仕事が忙しくなって放置してしまい数日後「全部読んだことにする」ボタンをクリックする繰り返しに疲れた。
もうフィードアグリゲータで定期的に情報を集めるのは無理なんだなと最近は諦め始めていて、かといって最近の出来事がわからなくなるのはちょっと。。
別に全部に目を通さなくていいから最近の情報は常に目の届くところで渦巻いていてほしい。</p>
<p>一日のうちでいちばん眺めているのはディスプレイ（特にターミナル）で、そのターミナル上に新しめの情報が湧き水みたいに出てきては消えていく何かが欲しいと思ったので作ってみた。</p>
<p><a href="https://github.com/hibariya/cline">Cline</a></p>
<p>CUIをメインとした通知アプリのつもり。
これを入れると↓のような通知を永遠に垂れ流すことができる（screenのbacktickとGrowlの部分）。</p>
<p><img src="/images/cline_sample.png" alt="Cline sample"></p>
<p>Clineがやることは単純で、</p>
<ol>
<li>ネットで配信されているフィードやJSONから情報を集めてきて</li>
<li>メッセージと公開時間とURLを一旦DBに保存して</li>
<li>設定した場所へ出力する</li>
</ol>
<p>これだけ。
フィードを集めてきてGrowl通知するだけならGrowlでやれるらしいけど、今回は集めた通知をターミナル上でこねくり回したりもしたいという欲求もあったのだった。</p>
<p>ちなみにscreenのbacktickが複数あるのは<a href="http://shyouhei.tumblr.com/post/313410522/screenrc">ここ</a>で紹介されているやり方で設定したもの。
ここにあるようにbacktickに日本語を表示するには git://git.savannah.gnu.org/screen.git から最新のソースを引っ張ってきてビルドしないとうまくいかなかった。</p>
<p>普段screenか何かをお使いであれば役に立つかも。</p>
<p>※ 2012/3/14 追記: ターミナル上に表示されたURLは、例えばiTermならCommand+Click、MacのターミナルならCommand+DoubleClickで開けるみたいです。</p>
<h2>インストール</h2>
<p>gemで入れます。rubyが1.9以上でないと動きません。Windowsでの動作は未確認。</p>
<div class="highlight">
<pre>  $ gem install cline
</pre>
</div>
<p>初回だけ、<code>init</code> コマンドでDBをつくります。</p>
<div class="highlight">
<pre>  $ cline init
</pre>
</div>
<h2>設定</h2>
<p>~/.cline/config に、幾つかの設定をします。例として、</p>
<ul>
<li>opmlに書いたフィードから集めてきたエントリを</li>
<li>最新の2000個まで貯めて</li>
<li>標準出力とGrowlに出力する</li>
</ul>
<p>ような設定にします。</p>
<div class="highlight">
<pre>  <span class="c1"># coding: utf-8</span>

  <span class="no">Cline</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
    <span class="n">config</span><span class="o">.</span><span class="n">append_collector</span> <span class="no">Cline</span><span class="o">::</span><span class="no">Collectors</span><span class="o">::</span><span class="no">Feed</span>
    <span class="n">config</span><span class="o">.</span><span class="n">pool_size</span> <span class="o">=</span> <span class="mi">2000</span>
    <span class="n">config</span><span class="o">.</span><span class="n">out_stream</span> <span class="o">=</span> <span class="no">Cline</span><span class="o">::</span><span class="no">OutStreams</span><span class="o">::</span><span class="no">WithGrowl</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vg">$stdout</span><span class="p">)</span>
  <span class="k">end</span>
</pre>
</div>
<p>べつにGrowlで出さなくてよければ、out_streamを設定する部分を</p>
<div class="highlight">
<pre>  <span class="n">config</span><span class="o">.</span><span class="n">out_stream</span> <span class="o">=</span> <span class="vg">$stdout</span>
</pre>
</div>
<p>とします。</p>
<h3>フィード一覧の登録</h3>
<p>フィード一覧の記述されたopmlファイル（例えば、LDRなどのフィードアグリゲータからエクスポートしたもの）を ~/.cline/feeds.xml に配置します。</p>
<p>OPMLといえばこんな感じのやつです。</p>
<div class="highlight">
<pre><span class="cp">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="nt">&lt;opml</span> <span class="na">version=</span><span class="s">"1.0"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>livedoor Reader Subscriptions<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;dateCreated&gt;</span>Sat, 29 Oct 2011 07:39:38 UTC<span class="nt">&lt;/dateCreated&gt;</span>
    <span class="nt">&lt;ownerName&gt;</span>hibariya<span class="nt">&lt;/ownerName&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;outline</span> <span class="na">title=</span><span class="s">"Subscriptions"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;outline</span> <span class="na">title=</span><span class="s">"Pinboard (Popular items from Pinboard)"</span> <span class="na">htmlUrl=</span><span class="s">"http://pinboard.in"</span> <span class="na">type=</span><span class="s">"rss"</span> <span class="na">xmlUrl=</span><span class="s">"http://feeds.pinboard.in/rss/popular/"</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;outline</span> <span class="na">title=</span><span class="s">"Strategic Choice"</span> <span class="na">htmlUrl=</span><span class="s">"http://d.hatena.ne.jp/asakichy/"</span> <span class="na">type=</span><span class="s">"rss"</span> <span class="na">xmlUrl=</span><span class="s">"http://d.hatena.ne.jp/asakichy/rss"</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;outline</span> <span class="na">title=</span><span class="s">"RubyKaigi AdventCalender 2011"</span> <span class="na">htmlUrl=</span><span class="s">"http://rubykaigi.org/2011/ja/advent_calendar"</span> <span class="na">type=</span><span class="s">"rss"</span> <span class="na">xmlUrl=</span><span class="s">"http://rubykaigi.org/2011/ja/advent_calendar.rss"</span> <span class="nt">/&gt;</span>
      <span class="c">&lt;!-- こんな感じでフィードの一覧が続く... --&gt;</span>
    <span class="nt">&lt;/outline&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/opml&gt;</span>
</pre>
</div>
<p>設定はこれで終わりです。</p>
<h2>通知の収集</h2>
<p><code>collect</code> コマンドを使うとフィードなどを素直に取ってきます。
cron的な何かで定期実行すればよいと思います。</p>
<div class="highlight">
<pre>  $ cline collect
</pre>
</div>
<h2>通知の出力</h2>
<p><code>show [offset]</code> コマンドで、<em>最も表示された回数が少なく最も古い</em>通知を1件表示します。
[offset]は何件かスキップしたいときに使います。</p>
<div class="highlight">
<pre>  $ cline show
  [2011-12-01 19:13:57 +0900][1] Gist: ursm create https://gist.github.com/1415569
</pre>
</div>
<p><code>tick [offset] [interval]</code> コマンドで、[interval]で指定された秒感覚で新しい通知を1件ずつ出力していきます。
これはtail -f っぽい出力になります。</p>
<div class="highlight">
<pre>  $ cline tick 0 1
  [2011-12-01 19:57:40 +0900][1] IssueComment: pokonski created https://github.com/twitter/bootstrap/issues/736
  [2011-12-01 20:01:54 +0900][1] nkym:「おんなのこ」/「yui」[pixiv] http://hibariya.tumblr.com/post/13585938765
  [2011-12-01 20:03:43 +0900][1] Photo http://hibariya.tumblr.com/post/13585964610
  [2011-12-01 20:04:48 +0900][1] "猫の足音、女の髭、岩の根、熊の腱、魚の息、鳥の唾液から作られた。これらは、グレイプニルを作るのに使用されたため、この世に存在しなくなった といわれる。" http://hibariya.tumblr.com/post/13585980013
  # 出力は続く...
</pre>
</div>
<p>ちなみに[1]とか表示されているのは、今までに表示された回数です。</p>
<h3>screen の backtick に垂れ流す</h3>
<p>~/.screenrc の設定に以下のような backtick の設定をすれば15秒ごとに新しい通知を表示することができます。</p>
<div class="highlight">
<pre>  backtick 0 0 0 cline tick 0 15
</pre>
</div>
<p>backtickでの表示はこんな感じですね（これは3つ表示している例）。
<img src="/images/cline_backtick_sample.png" alt="cline backtick"></p>
<p>ところで、1日に流れてくる情報の数には限りがあります。
もし通知が収集に追いついてしまったらどうなるかというと、また最初から通知し直します。
なので1度見逃しても安心。またいつか流れてきます。
今回の設定例だと最新の2000件が常にぐるぐると回リ続けます。2000件を超した古い通知から削除されます。</p>
<p>ひとつの通知が表示されている時間は短いものですので、目に止まったけど流れてしまったものを手早く見つけるコマンドも幾つか用意しました。</p>
<h3>キーワードで通知を出力する</h3>
<p>気になったけど流れていったタイトルとか、ドメインで絞り込んだりできます。</p>
<p><code>search</code> コマンドでキーワード検索した結果を一覧できます。</p>
<div class="highlight">
<pre>  $ cline search github.com
  [2011-12-04 17:17:37 +0900][1] CommitComment: svenfuchs  https://github.com/travis-ci/travis-ci/commit/b496bc9c5e#commitcomment-766925
  [2011-12-04 17:15:30 +0900][1] Push: svenfuchs  https://github.com/travis-ci/travis-ci
  [2011-12-04 16:57:16 +0900][1] Create: banister  https://github.com/pry/pry
  [2011-12-04 16:49:38 +0900][1] Watch: ursm started https://github.com/mgorny/portage-jobsmon
  [2011-12-04 16:42:15 +0900][1] Push: ConradIrwin  https://github.com/pry/pry
  # 出力は続く...
</pre>
</div>
<p>ヒットしたものをすべて出力するので less などで見るとよいかもしれません。</p>
<h3>最近表示した通知をいくつか出力する</h3>
<p><code>recent [limit]</code> コマンドで、最近通知したものを（できるだけ）現在に近い順で一覧できます。
[limit]を指定しなければ1件だけ出します。</p>
<div class="highlight">
<pre>  $ cline recent 10
  [2011-12-01 21:28:10 +0900][2] PullRequest: arunagw closed https://github.com/rails/rails/pull/2793
  [2011-12-01 21:28:10 +0900][2] IssueComment: arunagw created https://github.com/rails/rails/issues/2793
  [2011-12-01 21:24:25 +0900][2] Push: josevalim  https://github.com/rails/rails
  [2011-12-01 21:22:23 +0900][2] IssueComment: rsim created https://github.com/rails/rails/issues/2793
  # 出力は続く...
</pre>
</div>
<h2>その他: GithubのActivity</h2>
<p>ちなみにGithubのactivityも取得することもできます。
~/.cline/config のブロック内で</p>
<div class="highlight">
<pre>  <span class="n">config</span><span class="o">.</span><span class="n">append_collector</span> <span class="no">Cline</span><span class="o">::</span><span class="no">Collectors</span><span class="o">::</span><span class="no">Github</span>
  <span class="no">Cline</span><span class="o">::</span><span class="no">Collectors</span><span class="o">::</span><span class="no">Github</span><span class="o">.</span><span class="n">login_name</span> <span class="o">=</span> <span class="s1">'github username'</span>
</pre>
</div>
<p>と追記すると自分のfollowしている人のactivityを収集してくることができます。</p>
<h2>もっと他の情報を収集して通知する</h2>
<p>収集する対象や出力先は拡張できます。
より具体的には<a href="https://github.com/hibariya/cline">Cline</a>のREADMEを参照してください。</p>]]></content:encoded><dc:date>2011-12-04</dc:date><link>http://hibariya.github.com/entries/20111204/a0.html</link><author>hibariya</author></item><item about="http://hibariya.github.com/entries/20111109/a0.html"><title>retter-0.1.3</title><description>1日おいてすぐのアップデートをしました。
昨日言っていたDISQUSを簡単に導入できるようにしました。
準備

DISQUSのアカウントをつくります
ログインして、Retterで使うための新しいサイトをつくります

インストール
まずはRetterfileにdisqus_shortnameという設定を追記します。

disqus_shortname 'your_disqus_shortname'
...</description><content:encoded><![CDATA[<p><a href="https://github.com/hibariya/retter">1日おいてすぐのアップデートをしました</a>。</p>
<p>昨日言っていたDISQUSを簡単に導入できるようにしました。</p>
<h2>準備</h2>
<ol>
<li>DISQUSのアカウントをつくります</li>
<li>ログインして、Retterで使うための新しいサイトをつくります</li>
</ol>
<h2>インストール</h2>
<p>まずはRetterfileに<code>disqus_shortname</code>という設定を追記します。</p>
<div class="highlight">
<pre><span class="n">disqus_shortname</span> <span class="s1">'your_disqus_shortname'</span>
</pre>
</div>
<p>あとは任意の箇所でヘルパメソッド<code>render_disqus_comment_form</code>を呼ぶだけです。</p>
<p>例えば<code>layouts/article.html.haml</code>などに。</p>
<div class="highlight">
<pre><span class="cp">-# 省略</span>
<span class="nf">#comments</span><span class="p">=</span> <span class="n">render_disqus_comment_form</span>
<span class="cp">-# 省略</span>
</pre>
</div>]]></content:encoded><dc:date>2011-11-09</dc:date><link>http://hibariya.github.com/entries/20111109/a0.html</link><author>hibariya</author></item><item about="http://hibariya.github.com/entries/20111108/a1.html"><title>retter-0.1.2</title><description>バージョンを上げた。

テンプレートでエラーが起きたときに正しいファイル名と行数が出るようになった

edit preview コマンドに渡す引数としてファイル名（today.mdとか）が使えるようになった
スタイルの修正を少々

次はコメントシステムを簡単に導入できるようにしておきたい。</description><content:encoded><![CDATA[<p><a href="https://rubygems.org/gems/retter">バージョンを上げた</a>。</p>
<ul>
<li>テンプレートでエラーが起きたときに正しいファイル名と行数が出るようになった</li>
<li>
<code>edit</code> <code>preview</code> コマンドに渡す引数としてファイル名（today.mdとか）が使えるようになった</li>
<li>スタイルの修正を少々</li>
</ul>
<p>次はコメントシステムを簡単に導入できるようにしておきたい。</p>]]></content:encoded><dc:date>2011-11-08</dc:date><link>http://hibariya.github.com/entries/20111108/a1.html</link><author>hibariya</author></item></rdf:RDF>
